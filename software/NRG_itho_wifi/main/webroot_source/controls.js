//This file is automatically generated - do not edit this file, edit the files in dir controls_js_sources instead and run the build

var debug = false;
var count = 0;
var itho_low = 0;
var itho_medium = 127;
var itho_high = 255;
var sensor = -1;
var uuid = 0;
var wifistat_to;
var statustimer_to;
var saved_status_count = 0;
var current_status_count = 0;
localStorage.setItem("statustimer", 0);
localStorage.setItem("statustimer", 0);
var settingIndex = -1;

var websocketServerLocation = location.protocol.indexOf("https") > -1 ? 'wss://' + window.location.hostname + ':8000/ws' : 'ws://' + window.location.hostname + ':8000/ws';

let messageQueue = [];
let connectTimeout, pingTimeout;
let websock;

function startWebsock(websocketServerLocation) {
  messageQueue = [];
  clearTimeout(connectTimeout);
  clearTimeout(pingTimeout);
  pingTimeout = !1;
  connectTimeout = setTimeout((() => {
    if (debug) console.log("websock connect timeout."),
      //websock.close(),
      startWebsock(websocketServerLocation);
  }), 1000);
  websock = null;
  websock = new WebSocket(websocketServerLocation);

  websock.addEventListener('open', function (event) {
    if (debug) console.log('websock open');
    clearTimeout(connectTimeout);
    document.getElementById("layout").style.opacity = 1;
    document.getElementById("loader").style.display = "none";
    if (lastPageReq !== "") {
      update_page(lastPageReq);
    }
    getSettings('syssetup');
  });
  websock.addEventListener('message', function (event) {
    "pong" == event.data ? (clearTimeout(pingTimeout),
      pingTimeout = !1) : messageQueue.push(event.data);
  });
  websock.addEventListener('close', function (event) {
    if (debug) console.log('websock close');
    document.getElementById("layout").style.opacity = 0.3;
    document.getElementById("loader").style.display = "block";
    // setTimeout(startWebsock, 200, websocketServerLocation);
  });
  websock.addEventListener('error', function (event) {
    if (debug) console.log("websock Error!", event);
    startWebsock(websocketServerLocation);
    //websock.close();
  });
  setInterval((() => {
    pingTimeout || websock.readyState != WebSocket.OPEN || (pingTimeout = setTimeout((() => {
      if (debug) console.log("websock ping timeout.");
      startWebsock(websocketServerLocation);
    }
    ), 6e4),
      websock_send("ping"))
  }
  ), 5.5e4)
}

function websock_send(message) {
  if (websock.readyState === 1) {
    if (debug) console.log(message);
    websock.send(message);
  }
  else {
    if (debug) console.log("websock.readyState != open");
  }
}

(async function processMessages() {
  while (messageQueue.length > 0) {
    const message = messageQueue.shift();
    processMessage(message);
  }
  await new Promise(resolve => setTimeout(resolve, 0));
  processMessages();
})();

function processMessage(message) {
  if (debug) console.log(message);
  let f;
  try {
    f = JSON.parse(decodeURIComponent(message));
  } catch (error) {
    f = JSON.parse(message);
  }
  let g = document.body;
  if (f.wifisettings) {
    let x = f.wifisettings;
    processElements(x);
  }
  else if (f.logsettings) {
    let x = f.logsettings;
    processElements(x);
    if (x.rfloglevel > 0) $('#rflog_outer').removeClass('hidden');
  }
  else if (f.wifistat) {
    let x = f.wifistat;
    processElements(x);
  }
  else if (f.debuginfo) {
    let x = f.debuginfo;
    processElements(x);
  }
  else if (f.systemsettings) {
    let x = f.systemsettings;
    processElements(x);
    if ("itho_rf_support" in x) {
      if (x.itho_rf_support == 1 && x.rfInitOK == false) {
        if (confirm("For changes to take effect click 'Ok' to reboot")) {
          $('#main').empty();
          $('#main').append("<br><br><br><br>");
          $('#main').append(html_reboot_script);
          websock_send('{"reboot":true}');
        }
      }
      if (x.itho_rf_support == 1 && x.rfInitOK == true) $('#remotemenu').removeClass('hidden');
      else $('#remotemenu').addClass('hidden');
    }
    if (x.mqtt_ha_active == 1) $('#hadiscmenu').removeClass('hidden');
    else $('#hadiscmenu').addClass('hidden');
    if ("i2cmenu" in x) {
      if (x.i2cmenu == 1) {
        $('#i2cmenu').removeClass('hidden');
      }
      else {
        $('#i2cmenu').addClass('hidden');
      }
    }
    if ("api_version" in x) {
      localStorage.setItem("api_version", x.api_version);
    }
  }
  else if (f.remotes) {
    let x = f.remotes;
    let remfunc = f.remfunc;
    $('#RemotesTable').empty();
    buildHtmlTableRemotes('#RemotesTable', remfunc, x);
  }
  else if (f.vremotes) {
    let x = f.vremotes;
    let remfunc = f.remfunc;
    $('#vremotesTable').empty();
    buildHtmlTableRemotes('#vremotesTable', remfunc, x);
  }
  else if (f.ithostatusinfo) {
    let x = f.ithostatusinfo;
    $('#StatusTable').empty();
    if (f.target == "hadisc") {
      if (f.itho_status_ready) {
        current_status_count = f.count;
        status_items_loaded = true;
        $("#HADiscForm, #save_update_had").removeClass('hidden');
        buildHtmlHADiscTable(x);
      }
      else {
        $("#ithostatusrdy").html("Itho status items not (completely) loaded yet:<br><br><div id='iis'></div><br><br>Reload to try again or disable I2C commands (menu System Settings) which might be unsupported for your devic.<br><br><button id='hadreload' class='pure-button pure-button-primary'>Reload</button><br>");
        $("#ithostatusrdy").removeClass('hidden');
        $("#HADiscForm, #save_update_had").addClass('hidden');
        showItho(f.iis);
      }
    }
    else {
      buildHtmlStatusTable('#StatusTable', x);
    }
  }
  else if (f.hadiscsettings) {
    let x = f.hadiscsettings;
    saved_status_count = x.sscnt;
    if ((current_status_count !== saved_status_count) && (saved_status_count > 0)) {
      localStorage.setItem("ithostatus", JSON.stringify(x));
      $("#ithostatusrdy").html("The stored number of HA Discovery items does not match the current number of detected Itho status items. Activating/deactivating I2C functions can be a source of this discrepancy. Please check if configured items are still correct and click 'Save and update' to update the stored items.<br><button id='hadignore' class='pure-button pure-button-primary'>Ignore</button>");
      $("#ithostatusrdy").removeClass('hidden');
    }
    else {
      $("#ithostatusrdy").addClass('hidden');
      $("#ithostatusrdy").html('');
      updateStatusTableFromCompactJson(x);
    }

  }
  else if (f.i2cdebuglog) {
    let x = f.i2cdebuglog;
    $('#I2CLogTable').empty();
    buildHtmlTablePlain('#I2CLogTable', x);
  }
  else if (f.i2csniffer) {
    let x = f.i2csniffer;
    $('#i2clog_outer').removeClass('hidden');
    var d = new Date();
    $('#i2clog').prepend(`${d.toLocaleString('nl-NL')}: ${x}<br>`);
  }
  else if (f.ithodevinfo) {
    let x = f.ithodevinfo;
    processElements(x);
    localStorage.setItem("itho_setlen", x.itho_setlen);
    localStorage.setItem("itho_devtype", x.itho_devtype);
    localStorage.setItem("itho_fwversion", x.itho_fwversion);
    localStorage.setItem("itho_hwversion", x.itho_hwversion);
  }
  else if (f.ithosettings) {
    let x = f.ithosettings;
    updateSettingsLocStor(x);

    if (x.Index === 0 && x.update === false) {
      clearSettingsLocStor();
      localStorage.setItem("ihto_settings_complete", "false");
      $('#SettingsTable').empty();
      //add header
      addColumnHeader(x, '#SettingsTable', true);
      $('#SettingsTable').append('<tbody>');
    }
    if (x.update === false) {
      addRowTableIthoSettings($('#SettingsTable > tbody'), x);
    }
    else {
      updateRowTableIthoSettings(x);
    }
    if (x.Index < localStorage.getItem("itho_setlen") - 1 && x.loop === true && settingIndex == x.Index) {
      settingIndex++;
      websock_send(JSON.stringify({
        ithogetsetting: true,
        index: settingIndex,
        update: x.update
      }));
    }
    if (x.Index === localStorage.getItem("itho_setlen") - 1 && x.update === false && x.loop === true) {
      settingIndex = 0;
      websock_send(JSON.stringify({
        ithogetsetting: true,
        index: 0,
        update: true
      }));
    }
  }
  else if (f.wifiscanresult) {
    let x = f.wifiscanresult;
    $('#wifiscanresult').append(`<div class='ScanResults'><input id='${x.id}' class='pure-input-1-5' name='optionsWifi' value='${x.ssid}' type='radio'>${returnSignalSVG(x.sigval)}${returnWifiSecSVG(x.sec)} ${x.ssid}</label></div>`);
  }
  else if (f.systemstat) {
    let x = f.systemstat;
    uuid = x.uuid;
    if ('sensor_temp' in x) {
      $('#sensor_temp').html(`Temperature: ${round(x.sensor_temp, 1)}&#8451;`);
    }
    if ('sensor_hum' in x) {
      $('#sensor_hum').html(`Humidity: ${round(x.sensor_hum, 1)}%`);
    }
    $('#memory_box').show();
    $('#memory_box').html(`<p><b>Memory:</b><p><p>free: <b>${x.freemem}</b></p><p>low: <b>${x.memlow}</b></p>`);
    $('#mqtt_conn').removeClass();
    var button = returnMqttState(x.mqqtstatus);
    $('#mqtt_conn').addClass(`pure-button ${button.button}`);
    $('#mqtt_conn').text(button.state);
    $('#ithoslider').val(x.itho);
    $('#ithotextval').html(x.itho);
    if ('itho_low' in x) {
      itho_low = x.itho_low;
    }
    if ('itho_medium' in x) {
      itho_medium = x.itho_medium;
    }
    if ('itho_high' in x) {
      itho_high = x.itho_high;
    }
    var initstatus = '';
    if (x.ithoinit == -1) {
      initstatus = '<span style="color:#ca3c3c;">init failed - please power cycle the Itho unit -</span>';
    }
    else if (x.ithoinit == -2) {
      initstatus = '<span style="color:#ca3c3c;">i2c bus stuck - please power cycle the Itho unit -</span>';
    }
    else if (x.ithoinit == 1) {
      initstatus = '<span style="color:#1cb841;">connected</span>';
    }
    else if (x.ithoinit == 0) {
      initstatus = '<span style="color:#777;">setting up i2c connection</span>';
    }
    else {
      initstatus = 'unknown status';
    }
    $('#ithoinit').html(initstatus);
    if ('sensor' in x) {
      sensor = x.sensor;
    }
    if (x.itho_llm > 0) {
      $('#itho_llm').removeClass();
      $('#itho_llm').addClass("pure-button button-success");
      $('#itho_llm').text(`On ${x.itho_llm}`);
    }
    else {
      $('#itho_llm').removeClass();
      $('#itho_llm').addClass("pure-button button-secondary");
      $('#itho_llm').text("Off");
    }
    if (x.copy_id > 0) {
      $('#itho_copyid_vremote').removeClass();
      $('#itho_copyid_vremote').addClass("pure-button button-success");
      $('#itho_copyid_vremote').text(`Press join. Time remaining: ${x.copy_id}`);
    }
    else {
      $('#itho_copyid_vremote').removeClass();
      $('#itho_copyid_vremote').addClass("pure-button");
      $('#itho_copyid_vremote').text("Copy ID");
    }
    if ('format' in x) {
      if (x.format) {
        $('#format').text('Format filesystem');
      }
      else {
        $('#format').text('Format failed');
      }

    }
  }
  else if (f.remtypeconf) {
    let x = f.remtypeconf;
    if (hw_revision.startsWith('NON-CVE ') || itho_pwm2i2c == 0) {
      addvRemoteInterface(x.remtype);
    }
  }
  else if (f.messagebox) {
    let x = f.messagebox;
    count += 1;
    resetTimer();
    $('#message_box').show();
    $('#message_box').append(`<p class='messageP' id='mbox_p${count}'>Message: ${x.message}</p>`);
    removeAfter5secs(count);
  }
  else if (f.rflog) {
    let x = f.rflog;
    $('#rflog_outer').removeClass('hidden');
    var d = new Date();
    $('#rflog').prepend(`${d.toLocaleString('nl-NL')}: ${x.message}<br>`);
  }
  else if (f.ota) {
    let x = f.ota;
    $('#updateprg').html(`Firmware update progress: ${x.percent}%`);
    moveBar(x.percent, "updateBar");
  }
  else if (f.sysmessage) {
    let x = f.sysmessage;
    $(`#${x.id}`).text(x.message);
  }
  else {
    processElements(f);
  }

}

function initButton() {
  document.getElementById("command-button").addEventListener("click", sendCommand)
}
function trapKeyPress() {
  document.getElementById("command-text").addEventListener("keypress", (e => {
    "Enter" === e.code && (e.preventDefault(), document.getElementById("command-button").click())
  })),
    document.addEventListener("keydown", (e => {
      document.activeElement && "command-text" === document.activeElement.id && ("ArrowUp" === e.code ? (commandHistoryIdx--, commandHistoryIdx < 0 && (commandHistoryIdx = commandHistory.length > 0 ? commandHistory.length - 1 : 0), commandHistoryIdx >= 0 && commandHistoryIdx < commandHistory.length && (document.getElementById("command-text").value = commandHistory[commandHistoryIdx])) : "ArrowDown" === e.code && (commandHistoryIdx++, commandHistoryIdx >= commandHistory.length && (commandHistoryIdx = 0), commandHistoryIdx >= 0 && commandHistoryIdx < commandHistory.length && (document.getElementById("command-text").value = commandHistory[commandHistoryIdx])))
    }))
}

function clearSettingsLocStor() {
  let setlen = localStorage.getItem("itho_setlen");
  for (var index = 0; index < setlen; index++) {
    const localStorageKey = 'settingsIndex_' + index;
    let existingData = localStorage.getItem(localStorageKey);
    if (existingData) {
      localStorage.removeItem(localStorageKey);
    }
  }
}

function updateSettingsLocStor(receivedData) {
  let setlen = localStorage.getItem("itho_setlen");
  if (receivedData.hasOwnProperty('Index')) {

    const localStorageKey = 'settingsIndex_' + receivedData.Index;
    let existingData = localStorage.getItem(localStorageKey);

    if (existingData) {
      existingData = JSON.parse(existingData);

      // Update existing data with new values
      for (const key in receivedData) {
        existingData[key] = receivedData[key];
      }

      // Store the updated data in LocalStorage
      localStorage.setItem(localStorageKey, JSON.stringify(existingData));
      if (existingData.Index == (setlen - 1)) {
        localStorage.setItem("ihto_settings_complete", "true");
        localStorage.setItem("uuid", uuid);
        $('#downloadsettingsdiv').removeClass('hidden');
      }
    }
    else {
      // If no existing data, store the new data as is
      localStorage.setItem("ihto_settings_complete", "false");
      localStorage.setItem(localStorageKey, JSON.stringify(receivedData));
    }

  }
}
function loadSettingsLocStor() {

  let setlen = localStorage.getItem("itho_setlen");
  if (typeof setlen === 'undefined' || setlen == null) {
    if (debug) console.log("error: loadSettingsLocStor setting length unavailable");
    return;
  }
  for (var index = 0; index < setlen; index++) {
    const localStorageKey = 'settingsIndex_' + index;
    let existingData = localStorage.getItem(localStorageKey);
    if (existingData) {
      existingData = JSON.parse(existingData);

      if (index == 0) {
        $('#SettingsTable').empty();
        addColumnHeader(existingData, '#SettingsTable', true);
        $('#SettingsTable').append('<tbody>');
      }
      let current_tmp = existingData.Current;
      let maximum_tmp = existingData.Maximum;
      let minimum_tmp = existingData.Minimum;
      existingData.Current = null;
      existingData.Maximum = null;
      existingData.Minimum = null;
      addRowTableIthoSettings($('#SettingsTable > tbody'), existingData);
      existingData.Current = current_tmp;
      existingData.Maximum = maximum_tmp;
      existingData.Minimum = minimum_tmp;
      updateRowTableIthoSettings(existingData);
    }
    else {
      if (debug) console.log("error: no cached setting info for index:" + index);
    }
  }

}


$(document).ready(function () {
  document.getElementById("layout").style.opacity = 0.3;
  document.getElementById("loader").style.display = "block";
  startWebsock(websocketServerLocation);

  //handle menu clicks
  $(document).on('click', 'ul.pure-menu-list li a', function (event) {
    var page = $(this).attr('href');
    update_page(page);
    $('li.pure-menu-item').removeClass("pure-menu-selected");
    $(this).parent().addClass("pure-menu-selected");
    event.preventDefault();
  });
  $(document).on('click', '#headingindex', function (event) {
    update_page('index');
    $('li.pure-menu-item').removeClass("pure-menu-selected");
    event.preventDefault();
  });
  //handle wifi network select
  $(document).on('change', 'input', function (e) {
    if ($(this).attr('name') == 'optionsWifi') {
      $('#ssid').val($(this).attr('value'));
    }
  });
  //handle submit buttons
  $(document).on('click', 'button', function (e) {
    if ($(this).attr('id').startsWith('command-')) {
      const items = $(this).attr('id').split('-');
      websock_send(`{"command":"${items[1]}"}`);
    }
    else if ($(this).attr('id') == 'wifisubmit') {
      hostname = $('#hostname').val();
      websock_send(JSON.stringify({
        wifisettings: {
          ssid: $('#ssid').val(),
          passwd: $('#passwd').val(),
          appasswd: $('#appasswd').val(),
          dhcp: $('input[name=\'option-dhcp\']:checked').val(),
          ip: $('#ip').val(),
          subnet: $('#subnet').val(),
          gateway: $('#gateway').val(),
          dns1: $('#dns1').val(),
          dns2: $('#dns2').val(),
          port: $('#port').val(),
          hostname: $('#hostname').val(),
          ntpserver: $('#ntpserver').val(),
          timezone: $('#timezone').val(),
          aptimeout: $('#aptimeout').val()
        }
      }));
      update_page('wifisetup');
    }
    //syssubmit
    else if ($(this).attr('id') == 'syssumbit') {
      if (!isValidJsonArray($('#api_settings_activated').val())) {
        alert("error: Activated settings input value is not a valid JSON array!");
        return;
      }
      else {
        if (!areAllUnsignedIntegers(JSON.parse($('#api_settings_activated').val()))) {
          alert("error: Activated settings array contains non integer values!");
          return;
        }
      }
      websock_send(JSON.stringify({
        systemsettings: {
          sys_username: $('#sys_username').val(),
          sys_password: $('#sys_password').val(),
          syssec_web: $('input[name=\'option-syssec_web\']:checked').val(),
          syssec_api: $('input[name=\'option-syssec_api\']:checked').val(),
          syssec_edit: $('input[name=\'option-syssec_edit\']:checked').val(),
          api_version: $('input[name=\'option-api_version\']:checked').val(),
          api_normalize: $('input[name=\'option-api_normalize\']:checked').val(),
          api_settings: $('input[name=\'option-api_settings\']:checked').val(),
          api_settings_activated: JSON.parse($('#api_settings_activated').val()),
          syssht30: $('input[name=\'option-syssht30\']:checked').val(),
          itho_rf_support: $('input[name=\'option-itho_rf_support\']:checked').val(),
          itho_fallback: $('#itho_fallback').val(),
          itho_low: $('#itho_low').val(),
          itho_medium: $('#itho_medium').val(),
          itho_high: $('#itho_high').val(),
          itho_timer1: $('#itho_timer1').val(),
          itho_timer2: $('#itho_timer2').val(),
          itho_timer3: $('#itho_timer3').val(),
          itho_updatefreq: $('#itho_updatefreq').val(),
          itho_counter_updatefreq: $('#itho_counter_updatefreq').val(),
          itho_numvrem: $('#itho_numvrem').val(),
          //itho_numrfrem: $('#iitho_numrfrem').val(),
          itho_sendjoin: $('input[name=\'option-itho_sendjoin\']:checked').val(),
          itho_forcemedium: $('input[name=\'option-itho_forcemedium\']:checked').val(),
          itho_vremoteapi: $('input[name=\'option-itho_vremoteapi\']:checked').val(),
          itho_pwm2i2c: $('input[name=\'option-itho_pwm2i2c\']:checked').val(),
          itho_31da: $('input[name=\'option-itho_31da\']:checked').val(),
          itho_31d9: $('input[name=\'option-itho_31d9\']:checked').val(),
          itho_2401: $('input[name=\'option-itho_2401\']:checked').val(),
          itho_4210: $('input[name=\'option-itho_4210\']:checked').val(),
          i2c_safe_guard: $('input[name=\'option-i2c_safe_guard\']:checked').val(),
          i2c_sniffer: $('input[name=\'option-i2c_sniffer\']:checked').val()
        }
      }));
      update_page('system');
    }
    else if ($(this).attr('id') == 'syslogsubmit') {
      websock_send(JSON.stringify({
        logsettings: {
          loglevel: $('#loglevel').val(),
          syslog_active: $('input[name=\'option-syslog_active\']:checked').val(),
          esplog_active: $('input[name=\'option-esplog_active\']:checked').val(),
          webserial_active: $('input[name=\'option-webserial_active\']:checked').val(),
          rfloglevel: $('#rfloglevel').val(),
          logserver: $('#logserver').val(),
          logport: $('#logport').val(),
          logref: $('#logref').val()
        }
      }));
      update_page('syslog');
    }
    //mqttsubmit
    else if ($(this).attr('id') == 'mqttsubmit') {
      websock_send(JSON.stringify({
        systemsettings: {
          mqtt_active: $('input[name=\'option-mqtt_active\']:checked').val(),
          mqtt_serverName: $('#mqtt_serverName').val(),
          mqtt_username: $('#mqtt_username').val(),
          mqtt_password: $('#mqtt_password').val(),
          mqtt_port: $('#mqtt_port').val(),
          mqtt_version: $('#mqtt_version').val(),
          mqtt_base_topic: $('#mqtt_base_topic').val(),
          mqtt_ha_topic: $('#mqtt_ha_topic').val(),
          mqtt_domoticzin_topic: $('#mqtt_domoticzin_topic').val(),
          mqtt_domoticzout_topic: $('#mqtt_domoticzout_topic').val(),
          mqtt_idx: $('#mqtt_idx').val(),
          sensor_idx: $('#sensor_idx').val(),
          mqtt_domoticz_active: $('input[name=\'option-mqtt_domoticz_active\']:checked').val(),
          mqtt_ha_active: $('input[name=\'option-mqtt_ha_active\']:checked').val()
        }
      }));
      update_page('mqtt');
    }
    else if ($(this).attr('id') == 'itho_llm') {
      websock_send('{"itho_llm":true}');
    }
    else if ($(this).attr('id') == 'itho_remove_remote' || $(this).attr('id') == 'itho_remove_vremote') {
      var selected = $('input[name=\'optionsRemotes\']:checked').val();
      if (selected == null) {
        alert("Please select a remote.")
      }
      else {
        var val = parseInt(selected, 10) + 1;
        websock_send('{"' + $(this).attr('id') + '":' + val + '}');
      }
    }
    else if ($(this).attr('id') == 'itho_update_remote' || $(this).attr('id') == 'itho_update_vremote') {
      var i = $('input[name=\'optionsRemotes\']:checked').val();
      if (i == null) {
        alert("Please select a remote.");
      }
      else {
        var remfunc = (typeof $('#func_remote-' + i).val() === 'undefined') ? 0 : $('#func_remote-' + i).val();
        var remtype = (typeof $('#type_remote-' + i).val() === 'undefined') ? 0 : $('#type_remote-' + i).val();
        var bidirectional = (typeof $('input[id=\'bidirect_remote-' + i + '\']:checked').val() === 'undefined') ? false : true;
        var id = $('#id_remote-' + i).val();
        if (id == 'empty slot') id = "00,00,00";
        if (isHex(id.split(",")[0]) && isHex(id.split(",")[1]) && isHex(id.split(",")[2])) {
          websock_send(`{"${$(this).attr('id')}":${i},"id":[${parseInt(id.split(",")[0], 16)},${parseInt(id.split(",")[1], 16)},${parseInt(id.split(",")[2], 16)}],"value":"${$('#name_remote-' + i).val()}","remtype":${remtype},"remfunc":${remfunc},"bidirectional":${bidirectional}}`);
        }
        else {
          alert("ID error, please use HEX notation separated by ',' (ie. 'A1,34,7F')");
        }
      }
    }
    else if ($(this).attr('id') == 'update_rf_id') {
      var id = $('#module_rf_id_str').val();
      if (isHex(id.split(",")[0]) && isHex(id.split(",")[1]) && isHex(id.split(",")[2])) {
        websock_send(`{"update_rf_id":[${parseInt(id.split(",")[0], 16)},${parseInt(id.split(",")[1], 16)},${parseInt(id.split(",")[2], 16)}]}`);
      }
      else {
        alert("ID error, please use HEX notation separated by ',' (ie. 'A1,34,7F')");
      }
    }
    else if ($(this).attr('id') == 'update_num_rf') {
      websock_send(JSON.stringify({
        systemsettings: {
          itho_numrfrem: $('#itho_numrfrem').val()
        }
      }));
    }
    else if ($(this).attr('id') == 'itho_copyid_vremote') {
      var i = $('input[name=\'optionsRemotes\']:checked').val();
      if (i == null) {
        alert("Please select a remote.");
      }
      else {
        var val = parseInt(i, 10) + 1;
        websock_send(`{"copy_id":true, "index":${val}}`);
      }
    }
    else if ($(this).attr('id').substr(0, 15) == 'ithosetrefresh-') {
      var row = parseInt($(this).attr('id').substr(15));
      var i = $('input[name=\'options-ithoset\']:checked').val();
      if (i == null) {
        alert("Please select a row.");
      }
      else if (i != row) {
        alert("Please select the correct row.");
      }
      else {
        $('input[name=\'options-ithoset\']:checked').prop('checked', false);
        $('[id^=ithosetrefresh-]').each(function (index) {
          $(`#ithosetrefresh-${index}, #ithosetupdate-${index}`).removeClass('pure-button-primary');
        });
        $(`#Current-${i}, #Minimum-${i}, #Maximum-${i}`).html(`<div style='margin: auto;' class='dot-elastic'></div>`);
        websock_send('{"ithosetrefresh":' + i + '}');
      }
    }
    else if ($(this).attr('id').substr(0, 14) == 'ithosetupdate-') {
      var row = parseInt($(this).attr('id').substr(14));
      var i = parseInt($('input[name=\'options-ithoset\']:checked').val());
      if (i == null) {
        alert("Please select a row.");
      }
      else if (i != row) {
        alert("Please select the correct row.");
      }

      else {
        if (Number.isInteger(parseFloat($('#name_ithoset-' + i).val()))) {
          websock_send(JSON.stringify({
            ithosetupdate: i,
            value: parseInt($('#name_ithoset-' + i).val())
          }));
        }
        else {
          websock_send(JSON.stringify({
            ithosetupdate: i,
            value: parseFloat($('#name_ithoset-' + i).val())
          }));
        }

        $('input[name=\'options-ithoset\']:checked').prop('checked', false);
        $('[id^=ithosetrefresh-]').each(function (index) {
          $(`#ithosetrefresh-${index}, #ithosetupdate-${index}`).removeClass('pure-button-primary');
        });
        $(`#Current-${i}, #Minimum-${i}, #Maximum-${i}`).html(`<div style='margin: auto;' class='dot-elastic'></div>`);
      }
    }
    else if ($(this).attr('id') == 'resetwificonf') {
      if (confirm("This will reset the wifi config to factory default, are you sure?")) {
        websock_send('{"resetwificonf":true}');
      }
    }
    else if ($(this).attr('id') == 'resetsysconf') {
      if (confirm("This will reset the system configs files to factory default, are you sure?")) {
        websock_send('{"resetsysconf":true}');
      }
    }
    else if ($(this).attr('id') == 'saveallconfigs') {
      websock_send('{"saveallconfigs":true}');
    }
    else if ($(this).attr('id') == 'reboot') {
      if (confirm("This will reboot the device, are you sure?")) {
        $('#rebootscript').append(html_reboot_script);
        websock_send('{"reboot":true}');
      }
    }
    else if ($(this).attr('id') == 'format') {
      if (confirm("This will erase all settings, are you sure?")) {
        websock_send('{"format":true}');
        $('#format').text('Formatting...');
      }
    }
    else if ($(this).attr('id') == 'wifiscan') {
      $('.ScanResults').remove();
      $('.hidden').removeClass('hidden');
      websock_send('{"wifiscan":true}');
    }
    else if ($(this).attr('id').startsWith('button_vremote-')) {
      const items = $(this).attr('id').split('-');
      websock_send(`{"vremote":${items[1]}, "command":"${items[2]}"}`);
    }
    else if ($(this).attr('id').startsWith('button_remote-')) {
      const items = $(this).attr('id').split('-');
      websock_send(`{"remote":${items[1]}, "command":"${items[2]}"}`);
    }
    else if ($(this).attr('id').startsWith('ithobutton-')) {
      const items = $(this).attr('id').split('-');
      websock_send(`{"ithobutton":"${items[1]}"}`);
      if (items[1] == 'shtreset') $(`#i2c_sht_reset`).text("Processing...");
    }
    else if ($(this).attr('id').startsWith('button-')) {
      const items = $(this).attr('id').split('-');
      websock_send(`{"button":"${items[1]}"}`);
    }
    else if ($(this).attr('id').startsWith('rfdebug-')) {
      const items = $(this).attr('id').split('-');
      if (items[1] == 0) $('#rflog_outer').addClass('hidden');
      if (items[1] > 0) $('#rflog_outer').removeClass('hidden');
      if (items[1] == 12762) {
        websock_send(`{"rfdebug":${items[1]}, "faninfo":${$('#rfdebug-12762-faninfo').val()}, "timer":${$('#rfdebug-12762-timer').val()}}`);
      }
      else if (items[1] == 12761) {
        websock_send(`{"rfdebug":${items[1]}, "status":${$('#rfdebug-12761-status').val()}, "fault":${$('#rfdebug-12761-fault').val()}, "frost":${$('#rfdebug-12761-frost').val()}, "filter":${$('#rfdebug-12761-filter').val()}}`);

      }
      else {
        websock_send(`{"rfdebug":${items[1]}}`);
      }
    }
    else if ($(this).attr('id').startsWith('i2csniffer-')) {
      const items = $(this).attr('id').split('-');
      if (items[1] == 0) $('#i2clog_outer').addClass('hidden');
      if (items[1] > 0) $('#i2clog_outer').removeClass('hidden');
      websock_send(`{"i2csniffer":${items[1]}}`);
    }
    else if ($(this).attr('id') == 'button2410') {
      websock_send(JSON.stringify({
        ithobutton: 2410,
        index: parseInt($('#itho_setting_id').val())
      }));
    }
    else if ($(this).attr('id') == 'button2410set') {
      websock_send(JSON.stringify({
        ithobutton: 24109,
        ithosetupdate: parseInt($('#itho_setting_id_set').val()),
        value: parseFloat($('#itho_setting_value_set').val())
      }));
    }
    else if ($(this).attr('id') == 'button4210') {
      websock_send(JSON.stringify({
        ithobutton: 4210
      }));
    }
    else if ($(this).attr('id') == 'buttonCE30') {
      websock_send(JSON.stringify({
        ithobutton: 0xCE30,
        ithotemp: parseFloat($('#itho_ce30_temp').val() * 100.),
        ithotemptemp: parseFloat($('#itho_ce30_temptemp').val() * 100.),
        ithotimestamp: $('#itho_ce30_timestamp').val()
      }));
    }
    else if ($(this).attr('id') == 'buttonC000') { //CO2
      websock_send(JSON.stringify({
        ithobutton: 0xC000,
        itho_c000_speed1: Number($('#itho_c000_speed1').val()),
        itho_c000_speed2: Number($('#itho_c000_speed2').val())
      }));
    }
    else if ($(this).attr('id') == 'button9298') { //CO2 value
      websock_send(JSON.stringify({
        ithobutton: 0x9298,
        itho_9298_val: Number($('#itho_9298_val').val())
      }));
    }
    else if ($(this).attr('id') == 'button4030') {
      if ($('#itho_4030_password').val() == 'thisisunsafe') {
        websock.send(JSON.stringify({
          ithobutton: 4030,
          idx: Number($('#itho_4030_index').val()),
          dt: Number($('#itho_4030_datatype').val()),
          val: Number($('#itho_4030_value').val()),
          chk: Number($('#itho_4030_checked').val()),
        }));
      }
    }
    else if ($(this).attr('id') == 'ithogetsettings') {
      if (localStorage.getItem("ihto_settings_complete") == "true" && localStorage.getItem("uuid") == uuid) {
        loadSettingsLocStor();
        $('#settings_cache_load').removeClass('hidden');
        $('#downloadsettingsdiv').removeClass('hidden');
      }
      else {
        settingIndex = 0;
        websock_send(JSON.stringify({
          ithogetsetting: true,
          index: 0,
          update: false
        }));
      }
    }
    else if ($(this).attr('id') == 'ithoforcerefresh') {
      $('#settings_cache_load').addClass('hidden');
      $('#downloadsettingsdiv').addClass('hidden');
      settingIndex = 0;
      websock_send(JSON.stringify({
        ithogetsetting: true,
        index: 0,
        update: false
      }));
    }
    else if ($(this).attr('id') == 'downloadsettings') {
      if (localStorage.getItem("ihto_settings_complete") == "true" && localStorage.getItem("uuid") == uuid) {
        let settings = {};
        let setlen = localStorage.getItem("itho_setlen");
        settings['uuid'] = uuid;
        settings['itho_setlen'] = setlen;
        settings['itho_devtype'] = localStorage.getItem("itho_devtype");
        settings['itho_fwversion'] = localStorage.getItem("itho_fwversion");
        settings['itho_hwversion'] = localStorage.getItem("itho_hwversion");
        let errordetect = false;

        for (var index = 0; index < setlen; index++) {
          const localStorageKey = 'settingsIndex_' + index;
          let existingData = localStorage.getItem(localStorageKey);
          if (existingData) {
            let obj = JSON.parse(existingData);
            delete obj.loop;
            delete obj.update;
            settings[localStorageKey] = obj;
            for (const key in obj) {
              if (obj[key] == "ret_error") {
                errordetect = true;
              }
            }
          }
        }
        if (errordetect) {
          alert("error: values with errors detected, settings load not complete!");
        }
        else {
          let dataStr = JSON.stringify(settings);
          let dataBlob = new Blob([dataStr], { type: 'application/json' });
          let downloadLink = document.createElement('a');
          downloadLink.href = window.URL.createObjectURL(dataBlob);
          downloadLink.download = 'settings.json';
          document.body.appendChild(downloadLink);
          downloadLink.click();
          document.body.removeChild(downloadLink);
        }

      }
      else {
        alert("error: download of settings file not possible!");
      }
    }
    else if ($(this).attr('id') == 'updatesubmit') {
      e.preventDefault();
      var form = $('#updateform')[0];
      var data = new FormData(form);
      let filename = data.get('update').name;
      if (!filename.endsWith(".bin")) {
        count += 1;
        resetTimer();
        $('#message_box').show();
        $('#message_box').append(`<p class='messageP' id='mbox_p${count}'>Updater: file name error, please select a *.bin firmware file</p>`);
        removeAfter5secs(count);
        return;
      }
      $('#updatesubmit').addClass("pure-button-disabled");
      $('#updatesubmit').text("Update in progress...");
      $('#uploadProgress, #updateProgress, #uploadprg, #updateprg').show();
      $.ajax({ url: '/update', type: 'POST', data: data, contentType: false, processData: false, xhr: function () { var xhr = new window.XMLHttpRequest(); xhr.upload.addEventListener('progress', function (evt) { if (evt.lengthComputable) { var per = Math.round(10 + (((evt.loaded / evt.total) * 100) * 0.9)); $('#uploadprg').html('File upload progress: ' + per + '%'); moveBar(per, "uploadBar"); } }, false); return xhr; }, success: function (d, s) { moveBar(100, "updateBar"); $('#updateprg').html('Firmware update progress: 100%'); $('#updatesubmit').text("Update finished"); $('#time').show(); startCountdown(); }, error: function () { $('#updatesubmit').text("Update failed"); $('#time').show(); startCountdown(); } });
    }
    else if ($(this).attr('id') == 'hadreload') {
      $("#ithostatusrdy, #HADiscForm, #save_update_had").addClass('hidden');
      $("#ithostatusrdy").html('');
      setTimeout(function () { getSettings('hadiscinfo'); }, 1000);
    }
    else if ($(this).attr('id') == 'hadignore') {
      $("#ithostatusrdy").addClass('hidden');
      $("#ithostatusrdy").html('');
      let obj = localStorage.getItem("ithostatus");
      updateStatusTableFromCompactJson(JSON.parse(obj));
      localStorage.removeItem("ithostatus");
    }
    else if ($(this).attr('id') == 'save_update_had') {
      var jsonvar = generateCompactJson();
      websock_send(JSON.stringify({
        hadiscsettings: jsonvar
      }));
    }
    e.preventDefault();
    return false;
  });
  //keep the message box on top on scroll
  $(window).scroll(function (e) {
    var $el = $('#message_box');
    var isPositionFixed = ($el.css('position') == 'fixed');
    if ($(this).scrollTop() > 100 && !isPositionFixed) {
      $('#message_box').css({
        'position': 'fixed',
        'top': '0px'
      });
    }
  });
});

var timerHandle = setTimeout(function () {
  $('#message_box').hide();
}, 5000);

function resetTimer() {
  window.clearTimeout(timerHandle);
  timerHandle = setTimeout(function () {
    $('#message_box').hide();
  }, 5000);
}

function removeID(id) {
  $(`#${id}`).remove();
}

function processElements(x) {
  for (var key in x) {
    if (x.hasOwnProperty(key)) {
      if (Array.isArray(x[key])) {
        x[key] = JSON.stringify(x[key]);
      }
      var el = $(`#${key}`);
      if (el.is('input') || el.is('select')) {
        if ($(`#${key}`).val() !== x[key]) {
          $(`#${key}`).val(x[key]);
        }
      }
      else if (el.is('span')) {
        if ($(`#${key}`).text() !== x[key]) {
          $(`#${key}`).text(x[key]);
        }
      }
      else if (el.is('a')) {
        $(`#${key}`).attr("href", x[key]);
      }
      else {
        var radios = $(`input[name='option-${key}']`);
        if (radios[1]) {
          if (radios.is(':checked') === false) {
            radios.filter(`[value='${x[key]}']`).prop('checked', true);
          }
          radio(key, x[key]);
        }
      }
      var elbyname = $(`[name='${key}']`).each(function () {
        if ($(this).is('span')) {
          if ($(this).text() !== x[key]) {
            $(this).text(x[key]);
          }
        }
      });
    }
  }
}

function removeAfter5secs(count) {
  new Promise(resolve => {
    setTimeout(() => {
      removeID('mbox_p' + count);
    }, 5000);
  });
}

function round(value, precision) {
  var multiplier = Math.pow(10, precision || 0);
  return Math.round(value * multiplier) / multiplier;
}

function getlog(url) {
  const xhr = new XMLHttpRequest();
  xhr.open("GET", url, true);
  xhr.onreadystatechange = function () {
    if (xhr.readyState == 4 && xhr.status == 200) {
      let res = xhr.responseText.split(/\r?\n/).reverse().slice(1).join("<br>");
      $('#dblog').html(res);
    }
  }
  xhr.onerror = (e) => {
    $('#dblog').html(xhr.statusText);
  };
  xhr.send(null);
}

function radio(origin, state) {
  if (origin == "dhcp") {
    if (state == 'on') {
      $('#ip, #subnet, #gateway, #dns1, #dns2').prop('readonly', true);
      $('#port').prop('readonly', false);
      $('#option-dhcp-on, #option-dhcp-off').prop('disabled', false);
    }
    else {
      $('#ip, #subnet, #gateway, #dns1, #dns2, #port').prop('readonly', false);
      $('#option-dhcp-on, #option-dhcp-off').prop('disabled', false);
    }
  }
  else if (origin == "mqtt_active") {
    if (state == 1) {
      $('#mqtt_serverName, #mqtt_username, #mqtt_password, #mqtt_port, #mqtt_base_topic, #mqtt_ha_topic, #mqtt_domoticzin_topic, #mqtt_domoticzout_topic, #mqtt_idx, #sensor_idx').prop('readonly', false);
      $('#option-mqtt_domoticz_active-0, #option-mqtt_domoticz_active-1, #option-mqtt_ha_active-1, #option-mqtt_ha_active-0').prop('disabled', false);
    }
    else {
      $('#mqtt_serverName, #mqtt_username, #mqtt_password, #mqtt_port, #mqtt_base_topic, #mqtt_ha_topic, #mqtt_domoticzin_topic, #mqtt_domoticzout_topic, #mqtt_idx, #sensor_idx').prop('readonly', true);
      $('#option-mqtt_domoticz_active-0, #option-mqtt_domoticz_active-1, #option-mqtt_ha_active-1, #option-mqtt_ha_active-0').prop('disabled', true);

    }
  }
  else if (origin == "mqtt_domoticz_active") {
    if (state == 1) {
      $('#mqtt_domoticzin_topic, #label-mqtt_domoticzin, #label-mqtt_domoticzout, #mqtt_domoticzout_topic, #mqtt_idx, #label-mqtt_idx, #sensor_idx, #label-sensor_idx').show();
    }
    else {
      $('#mqtt_domoticzin_topic, #label-mqtt_domoticzin, #label-mqtt_domoticzout, #mqtt_domoticzout_topic, #mqtt_idx, #label-mqtt_idx, #sensor_idx, #label-sensor_idx').hide();
    }
  }
  else if (origin == "mqtt_ha_active") {
    if (state == 1) {
      $('#mqtt_ha_topic, #label-mqtt_ha').show();
    }
    else {
      $('#mqtt_ha_topic, #label-mqtt_ha').hide();
    }
  }
  else if (origin == "remote" || origin == "ithoset") {
    $(`[id^=name_${origin}-]`).each(function (index) {
      $(`#name_${origin}-${index}`).prop('readonly', true);
      if (index == state) {
        $(`#name_${origin}-${index}`).prop('readonly', false);
      }
    });
    $(`[id^=type_${origin}-]`).each(function (index) {
      $(`#type_${origin}-${index}`).prop('disabled', true);
      if (index == state) {
        $(`#type_${origin}-${index}`).prop('disabled', false);
      }
    });
    $(`[id^=func_${origin}-]`).each(function (index) {
      $(`#func_${origin}-${index}`).prop('disabled', true);
      if (index == state) {
        $(`#func_${origin}-${index}`).prop('disabled', false);
      }
    });
    $(`[id^=id_${origin}-]`).each(function (index) {
      $(`#id_${origin}-${index}`).prop('readonly', true);
      if (index == state) {
        $(`#id_${origin}-${index}`).prop('readonly', false);
      }
    });
    $(`[id^=bidirect_${origin}-]`).each(function (index) {
      $(`#bidirect_${origin}-${index}`).prop("disabled", true);
      if (index == state) {
        remfunction_validation(index);
      }
    });
    if (origin == "ithoset") {
      $('[id^=ithosetrefresh-]').each(function (index) {
        $(`#ithosetrefresh-${index}, #ithosetupdate-${index}`).removeClass('pure-button-primary');
        if (index == state) {
          $(`#ithosetrefresh-${index}, #ithosetupdate-${index}`).addClass('pure-button-primary');
        }
      });
    }
  }
}

function getSettings(pagevalue) {
  if (websock.readyState === 1) {
    websock_send('{"' + pagevalue + '":true}');
  }
  else {
    if (debug) console.log("websock not open");
    setTimeout(getSettings, 250, pagevalue);
  }
}

//
// Reboot script
//
var secondsRemaining;
var intervalHandle;
function resetPage() {
  window.location.href = ('http://' + hostname + '.local');
}
function tick() {
  var timeDisplay = document.getElementById('time');
  if (timeDisplay == null)
    return;
  var sec = secondsRemaining - (Math.floor(secondsRemaining / 60) * 60);
  if (sec < 10) sec = '0' + sec;
  timeDisplay.innerText = `This page will reload to the start page in ${sec} seconds...`;
  if (secondsRemaining === 0) {
    clearInterval(intervalHandle);
    resetPage();
    return;
  }
  secondsRemaining--;
}
function startCountdown() {
  secondsRemaining = 30;
  intervalHandle = setInterval(tick, 1000);
}
function moveBar(nPer, element) {
  var elem = document.getElementById(element);
  if (elem !== null) elem.style.width = nPer + '%';
}
//
//
//

function updateSlider(value) {
  var val = parseInt(value);
  if (isNaN(val)) val = 0;
  $('#ithotextval').html(val);
  websock_send(JSON.stringify({ 'itho': val }));
}

//function to load html main content
var lastPageReq = "";
function update_page(page) {
  lastPageReq = page;
  clearTimeout(wifistat_to);
  clearTimeout(statustimer_to);
  $('#main').empty();
  $('#main').css('max-width', '768px')
  if (page == 'index') { $('#main').append(html_index); }
  if (page == 'wifisetup') { $('#main').append(html_wifisetup); }
  if (page == 'syslog') { $('#main').append(html_syslog); }
  if (page == 'system') {
    $('#main').append(html_systemsettings_start);
    if (hw_revision == "2" || hw_revision.startsWith('NON-CVE ')) { $('#sys_fieldset').append(html_systemsettings_cc1101); }
    $('#sys_fieldset').append(html_systemsettings_end);
  }
  if (page == 'itho') { $('#main').append(html_ithosettings); }
  if (page == 'status') { $('#main').append(html_ithostatus); }
  if (page == 'remotes') { $('#main').append(html_remotessetup); }
  if (page == 'vremotes') { $('#main').append(html_vremotessetup); }
  if (page == 'mqtt') { $('#main').append(html_mqttsetup); }
  if (page == 'api') { $('#main').append(html_api); }
  if (page == 'help') { $('#main').append(html_help); }
  if (page == 'reset') { $('#main').append(html_reset); }
  if (page == 'update') { $('#main').append(html_update); }
  if (page == 'debug') { $('#main').append(html_debug); $('#main').css('max-width', '1600px') }
  if (page == 'i2cdebug') { $('#main').append(html_i2cdebug); }
  if (page == 'hadiscovery') { $('#main').append(html_hadiscovery); }


}

//handle menu collapse on smaller screens
window.onload = function () {
  (function (window, document) {
    var layout = document.getElementById('layout'),
      menu = document.getElementById('menu'),
      menuLink = document.getElementById('menuLink'),
      content = document.getElementById('main');
    function toggleClass(element, className) {
      var classes = element.className.split(/\s+/),
        length = classes.length,
        i = 0;
      for (; i < length; i++) {
        if (classes[i] === className) {
          classes.splice(i, 1);
          break;
        }
      }
      if (length === classes.length) {
        classes.push(className);
      }
      element.className = classes.join(' ');
    }
    function toggleAll(e) {
      var active = 'active';
      e.preventDefault();
      toggleClass(layout, active);
      toggleClass(menu, active);
      toggleClass(menuLink, active);
    }
    menuLink.onclick = function (e) {
      toggleAll(e);
    };
    content.onclick = function (e) {
      if (menu.className.indexOf('active') !== -1) {
        toggleAll(e);
      }
    };
  }(this, this.document));
};

function ValidateIPaddress(ipaddress) {
  if (/^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/.test(ipaddress)) {
    return true;
  }
  return false;
}

function isHex(hex) {
  if (typeof hex === 'string') {
    if (hex.length === 1)
      hex = "0" + hex;

    return hex.length === 2
      && !isNaN(Number('0x' + hex))
  }
  return false;
}

function isUnsignedInteger(value) {
  return Number.isInteger(value) && value >= 0;
}

function areAllUnsignedIntegers(array) {
  return array.every(isUnsignedInteger);
}

function isValidJsonArray(input) {
  try {
    const parsed = JSON.parse(input);
    return Array.isArray(parsed);
  } catch (e) {
    return false;
  }
}

function returnMqttState(state) {
  state = state + 5;
  var states = ["Disabled", "Connection Timeout", "Connection Lost", "Connection Failed", "Disconnected", "Connected", "MQTT version unsupported", "Client ID rejected", "Server Unavailable", "Bad Credentials", "Client Unauthorized"];
  var button = "";
  if (state == 0) {
    button = "";
  }
  else if (state < 5) {
    button = "button-error";
  }
  else if (state > 5) {
    button = "button-warning";
  }
  else {
    button = "button-success";
  }
  return { "state": states[state], "button": button };
}

//functions to generate SVG images
function returnSignalSVG(signalVal) {
  var returnString = '';
  returnString += '<svg id=\'svgSignalImage\' width=28 height=28 xmlns=\'http://www.w3.org/2000/svg\' xmlns:xlink=\'http://www.w3.org/1999/xlink\' version=\'1.1\' x=\'0px\' y=\'0px\' viewBox=\'0 0 96 120\' style=\'enable-background:new 0 0 96 96;\' xml:space=\'preserve\'>';
  returnString += '<rect x=\'5\' y=\'70.106\' width=\'13.404\' height=\'13.404\' rx=\'2\' ry=\'2\' fill=\'#';
  if (signalVal > 0) {
    returnString += '000000';
  } else {
    returnString += 'cccccc';
  }
  returnString += '\'/>';
  returnString += '<rect x=\'24.149\' y=\'56.702\' width=\'13.404\' height=\'26.809\' rx=\'2\' ry=\'2\' fill=\'#';
  if (signalVal > 1) {
    returnString += '000000';
  } else {
    returnString += 'cccccc';
  }
  returnString += '\'/>';
  returnString += '<rect x=\'43.298\' y=\'43.298\' width=\'13.404\' height=\'40.213\' rx=\'2\' ry=\'2\' fill=\'#';
  if (signalVal > 2) {
    returnString += '000000';
  } else {
    returnString += 'cccccc';
  }
  returnString += '\'/>';
  returnString += '<rect x=\'62.447\' y=\'29.894\' width=\'13.403\' height=\'53.617\' rx=\'2\' ry=\'2\' fill=\'#';
  if (signalVal > 3) {
    returnString += '000000';
  } else {
    returnString += 'cccccc';
  }
  returnString += '\'/>';
  returnString += '<rect x=\'81.596\' y=\'16.489\' width=\'13.404\' height=\'67.021\' rx=\'2\' ry=\'2\' fill=\'#';
  if (signalVal > 4) {
    returnString += '000000';
  } else {
    returnString += 'cccccc';
  }
  returnString += '\'/></svg>';
  return returnString;
}

function returnWifiSecSVG(secVal) {
  var returnString = '';
  returnString += '<svg id=\'svgSignalImage\' width=30 height=30 xmlns=\'http://www.w3.org/2000/svg\' xmlns:xlink=\'http://www.w3.org/1999/xlink\' version=\'1.1\' x=\'0px\' y=\'0px\' viewBox=\'0 0 96 120\' style=\'enable-background:new 0 0 96 96;\' xml:space=\'preserve\'>';
  if (secVal == 2) {
    returnString += '<g><path d=\'M64,41h-4v-8.2c0-6.6-5.4-12-12-12s-12,5.4-12,12V41h-4c-2.2,0-4,2-4,4.2v22c0,4.4,3.6,7.8,8,7.8h24c4.4,0,8-3.3,8-7.8v-22   C68,43,66.2,41,64,41z M40,32.8c0-4.4,3.6-8,8-8s8,3.6,8,8V41H40V32.8z M64,67.2c0,2.2-1.8,3.8-4,3.8H36c-2.2,0-4-1.5-4-3.8V45h32   V67.2z\'/><g><path d=\'M48,62c-1.1,0-2-0.9-2-2v-2c0-1.1,0.9-2,2-2s2,0.9,2,2v2C50,61.1,49.1,62,48,62z\'/></g></g>';
  } else if (secVal == 1) {
    returnString += '<g><path d=\'M66,20.8c-6.6,0-12,5.4-12,12V41H32c-2.2,0-4,2-4,4.2v22c0,4.4,3.6,7.8,8,7.8h24c4.4,0,8-3.3,8-7.8v-22   c0-2.2-1.8-4.2-4-4.2h-6v-8.2c0-4.4,3.6-8,8-8s8,3.6,8,8V36h4v-3.2C78,26.1,72.6,20.8,66,20.8z M64,67.2c0,2.2-1.8,3.8-4,3.8H36   c-2.2,0-4-1.5-4-3.8V45h32V67.2z\'/><g><path d=\'M48,62c-1.1,0-2-0.9-2-2v-2c0-1.1,0.9-2,2-2s2,0.9,2,2v2C50,61.1,49.1,62,48,62z\'/></g></g>';
  } else {
    returnString += '<path d=\'M52.7,18.9c-9-0.9-19.1,4.5-21.4,18.3l6.9,1.2c1.7-10,8.4-13.1,14-12.6c4.8,0.4,9.8,3.6,9.8,9c0,4.4-2.5,6.8-6.6,10.1  c-3.9,3.2-8.7,7.3-8.7,14.6v6.1h6.9v-6.1c0-3.9,2.3-6,6.2-9.2c4-3.4,9.1-7.7,9.1-15.5C68.8,26.3,62.1,19.7,52.7,18.9z\'/><rect x=\'46.6\' y=\'73.4\' width=\'6.9\' height=\'7.8\'/>';
  }
  returnString += '</svg>';
  return returnString;
}

var remotesCount;
var remtypes = [
  ["RFT CVE", 0x22F1, ['away', 'low', 'medium', 'high', 'timer1', 'timer2', 'timer3', 'join', 'leave']],
  ["RFT AUTO", 0x22F3, ['auto', 'autonight', 'low', 'high', 'timer1', 'timer2', 'timer3', 'join', 'leave']],
  ["RFT-N", 0x22F5, ['away', 'low', 'medium', 'high', 'timer1', 'timer2', 'timer3', 'join', 'leave']],
  ["RFT AUTO-N", 0x22F4, ['auto', 'autonight', 'low', 'high', 'timer1', 'timer2', 'timer3', 'join', 'leave']],
  ["RFT DF/QF", 0x22F8, ['low', 'high', 'cook30', 'cook60', 'timer1', 'timer2', 'timer3', 'join', 'leave']],
  ["RFT RV", 0x12A0, ['auto', 'autonight', 'low', 'medium', 'high', 'timer1', 'timer2', 'timer3', 'join', 'leave']],
  ["RFT CO2", 0x1298, ['auto', 'autonight', 'low', 'medium', 'high', 'timer1', 'timer2', 'timer3', 'join', 'leave']],
  ["RFT PIR", 0x2E10, ['motion_on', 'motion_off', 'join', 'leave']],
  ["RFT Spider", 0x22F2, ['auto', 'autonight', 'low', 'medium', 'high', 'timer1', 'timer2', 'timer3', 'join', 'leave']]
];

var remfuncs = [
  ["Receive", 1],
  ["Monitor Only", 3],
  ["Send", 5]
];

function addRemoteButtons(selector, remfunc, remtype, vremotenum, seperator) {
  var remfuncname = remfunc == 1 ? "remote" : "vremote";
  for (const item of remtypes) {
    if (remtype == item[1]) {
      var newinner = '';
      for (var i = 0; i < item[2].length; ++i) {
        if (seperator) {
          if (i == 0 || item[2][i] == 'cook30' || item[2][i] == 'timer1' || (item[2].length == 10 && item[2][i] == 'low') || item[2][i] == 'join') { newinner += `<div style="text-align: center;margin: 2em 0 0 0;">`; }
        }

        newinner += `<button value='${item[2][i]}_remote-${vremotenum}' id='button_${remfuncname}-${vremotenum}-${item[2][i]}' class='pure-button pure-button-primary'>${item[2][i].charAt(0).toUpperCase() + item[2][i].slice(1)}</button>\u00A0`;

        if (seperator) {
          if (item[2][i] == 'high' || item[2][i] == 'cook60' || item[2][i] == 'timer3' || (item[2].length == 10 && item[2][i] == 'autonight') || item[2][i] == 'leave') {
            newinner += '</div>';
            $(selector).append(newinner);
            newinner = '';
          }
        }
        else {
          $(selector).append(newinner);
          newinner = '';
        }

      }
    }
  }
}

function addvRemoteInterface(remtype) {

  var elem = $('#reminterface');
  elem.empty();
  addRemoteButtons(elem, 2, remtype, 0, true);

}

function buildHtmlTablePlain(selector, jsonVar) {
  //var columns = addAllColumnHeadersPlain(jsonVar, selector);
  var columns = [];
  var headerThead$ = $('<thead>');
  var headerTr$ = $('<tr />');

  for (var key in jsonVar[0]) {
    if ($.inArray(key, columnSet) == -1) {
      columnSet.push(key);
      headerTr$.append($('<th />').html(key));
    }
  }

  headerThead$.append(headerTr$);
  $(selector).append(headerThead$);

  for (var i = 0; i < jsonVar.length; i++) {
    var row$ = $('<tr />');
    for (var colIndex = 0; colIndex < columns.length; colIndex++) {
      var cellValue = jsonVar[i][columns[colIndex]];
      if (cellValue == null) cellValue = "";
      row$.append($('<td />').html(cellValue));
    }
    $(selector).append(row$);
  }
}

function remfunction_validation(i) {
  if ($('#func_remote-' + i).val() == 5) $(`#bidirect_remote-${i}`).prop("disabled", false);
  else $(`#bidirect_remote-${i}`).prop("disabled", true);
}

function buildHtmlTableRemotes(selector, remfunc, jsonVar) {

  var headerThead$ = $('<thead>');
  var headerTr$ = $('<tr>');
  headerTr$.append($('<th>').html('Select'));

  for (var key in jsonVar[0]) {
    var append = [];
    if (key === "index") {
      append = ["Index", true];
    }
    else if (key === "id") {
      append = ["ID", true];
    }
    else if (key === "name") {
      append = ["Name", true];
    }
    else if (key === "remfunc" && remfunc == 1) { //unly show on rf remote page
      append = ["Remote function", true];
    }
    else if (key === "remtype") {
      append = ["Remote model", true];
    }
    else if (key === "capabilities") {
      append = ["Capabilities", true];
    }
    else if (key === "bidirectional" && remfunc == 1) { //unly show on rf remote page
      append = ["Bidirectional", true];
    }
    if (append[1]) { headerTr$.append($('<th>').html(append[0])); }
  }

  headerThead$.append(headerTr$);

  $(selector).append(headerThead$);

  var headerTbody$ = $('<tbody>');
  remotesCount = jsonVar.length;

  for (const remote of jsonVar) {
    var i = 0;
    if (remote["index"]) i = remote["index"];
    var remtype = 0;
    var remfunction = 0;
    var row$ = $('<tr>');
    row$.append($('<td>').html(`<input type='radio' id='option-select_remote-${i}' name='optionsRemotes' onchange='radio("remote",${i})' value='${i}' />`));

    for (const key in remote) {
      const value = remote[key];

      if (key === "index") {
        row$.append($('<td>').html(value.toString()));
      }
      else if (key === "id") {
        var cellValue = value.toString();
        if (cellValue == null) cellValue = '';
        cellValue = `${value[0].toString(16).toUpperCase()},${value[1].toString(16).toUpperCase()},${value[2].toString(16).toUpperCase()}`;
        if (cellValue == "0,0,0") cellValue = "empty slot";
        var idval = `id_remote-${i}`;
        row$.append($('<td>').html(`<input type='text' id='${idval}' value='${cellValue}' readonly='' />`));
      }
      else if (key === "name") {
        var cellValue = value.toString();
        if (cellValue == null) cellValue = '';
        var idval = `name_remote-${i}`;
        row$.append($('<td>').html(`<input type='text' id='${idval}' value='${cellValue}' readonly='' />`));
      }
      else if (key === "remfunc") {
        remfunction = value;
        if (remfunction != 2) { //do not add remote function is remfunction == virtual remote
          var select = document.createElement('select');
          select.name = remfunction;
          select.id = `func_remote-${i}`;
          select.setAttribute('onChange', `remfunction_validation(${i});`);
          select.disabled = true;
          for (const item of remfuncs) {
            var option = document.createElement('option');
            option.value = item[1];
            option.text = item[0];
            if (item[1] == remfunction) {
              option.selected = true;
              remtype = remfunction;
            }
            select.appendChild(option);
          }
          row$.append($('<td>').html(select));
        }
      }
      else if (key === "remtype") {
        var cellValue = value;
        var select = document.createElement('select');
        select.name = cellValue;
        select.id = `type_remote-${i}`;
        select.disabled = true;
        for (const item of remtypes) {
          var option = document.createElement('option');
          option.value = item[1];
          option.text = item[0];
          if (item[1] == cellValue) {
            option.selected = true;
            remtype = cellValue;
          }
          select.appendChild(option);
        }
        row$.append($('<td>').html(select));
      }
      else if (key === "capabilities") {
        if (remfunction == 2 || remfunction == 5) {
          var td$ = $('<td>');
          addRemoteButtons(td$, remfunc, remtype, i, false);
          row$.append(td$);
        }
        else {
          var str = '';
          var JSONObj = value;
          if (JSONObj != null) {
            for (let value in JSONObj) {
              if (JSONObj.hasOwnProperty(value)) {
                str += value + ':' + JSONObj[value];
                if (value != Object.keys(JSONObj).pop()) str += ', ';
              }
            }
          }
          row$.append($('<td>').html(str));
        }
      }
      else if (key === "bidirectional") {
        if (remfunc != 2) { //do not add remote function is remfunction == virtual remote
          var checkbox = document.createElement('input');
          checkbox.type = 'checkbox';
          checkbox.id = `bidirect_remote-${i}`;
          checkbox.checked = jsonVar[i]["bidirectional"];
          checkbox.disabled = true;
          row$.append($('<td>').html(checkbox));
        }
      }
      else {
        var cellValue = value.toString();
        if (cellValue == null) cellValue = '';
        row$.append(cellValue);
      }
      headerTbody$.append(row$);
    }
  }
  $(selector).append(headerTbody$);
}

function buildHtmlStatusTable(selector, jsonVar) {
  var headerThead$ = $('<thead>');
  var headerTr$ = $('<tr>');
  headerTr$.append($('<th>').html('Index'));
  headerTr$.append($('<th>').html('Label'));
  headerTr$.append($('<th>').html('Value'));
  headerThead$.append(headerTr$);
  $(selector).append(headerThead$);

  var headerTbody$ = $('<tbody>');

  Object.entries(jsonVar).forEach(([key, value], index) => {
    var row$ = $('<tr>');
    row$.append($('<td>').text(index));
    row$.append($('<td>').text(key));
    row$.append($('<td>').text(value));
    headerTbody$.append(row$);
  });

  $(selector).append(headerTbody$);

}

function addRowTableIthoSettings(selector, jsonVar) {
  var i = jsonVar.Index;
  var row$ = $(`<tr>`);
  row$.append($(`<td class='ithoset' style='text-align: center;vertical-align: middle;'>`).html(`<input type='radio' id='option-select_ithoset-${i}' name='options-ithoset' onchange='radio("ithoset",${i})' value='${i}' />`));
  for (var key in jsonVar) {
    if (key == "update") { continue; }
    if (key == "loop") { continue; }
    if (jsonVar[key] == null) {
      row$.append($(`<td class='ithoset' id='${key}-${i}'>`).html(`<div style='margin: auto;' class='dot-elastic'></div>`));
    }
    else {
      row$.append($(`<td class='ithoset'>`).html(jsonVar[key]));
    }
  }
  row$.append($(`<td class='ithoset'>`).html(`<button id='ithosetupdate-${i}' class='pure-button'>Update</button>`));
  row$.append($(`<td class='ithoset'>`).html(`<button id='ithosetrefresh-${i}' class='pure-button'>Refresh</button>`));

  $(selector).append(row$);
}

function updateRowTableIthoSettings(jsonVar) {
  var i = jsonVar.Index;
  for (var key in jsonVar) {
    if (key == "Current") {
      $(`#${key}-${i}`).html(`<input type='text' id='name_ithoset-${i}' value='${jsonVar[key]}' readonly='' />`);
    }
    if (key == "Minimum" || key == "Maximum") {
      $(`#${key}-${i}`).html(jsonVar[key]);
    }
  }
}

function addColumnHeader(jsonVar, selector, appendRow) {
  var columnSet = [];
  var headerThead$ = $('<thead>');
  var headerTr$ = $('<tr>');
  headerTr$.append($(`<th class='ithoset'>`).html('Select'));

  for (var key in jsonVar) {
    if (key == "update") { continue; }
    if (key == "loop") { continue; }
    if ($.inArray(key, columnSet) == -1) {
      columnSet.push(key);
      headerTr$.append($(`<th class='ithoset'>`).html(key));
    }
  }
  headerTr$.append($(`<th class='ithoset'>`).html('&nbsp;'));
  headerTr$.append($(`<th class='ithoset'>`).html('&nbsp;'));

  headerThead$.append(headerTr$);
  if (appendRow) {
    $(selector).append(headerThead$);
  }
  return columnSet;
}

function buildHtmlHADiscTable(ithostatusinfo) {
  const advancedToggleId = "advancedModeToggle";

  // Set default value for device type input field
  document.getElementById("hadevicename").value = ha_dev_name;

  const headerThead$ = $("<thead>");
  const headerTr$ = $("<tr>");
  headerTr$.append($("<th>").html("Include"));
  headerTr$.append($("<th>").html("Label"));
  headerTr$.append($("<th>").html("HA Name"));
  headerTr$.append($("<th>").addClass("advanced hidden").html("Device Class"));
  headerTr$.append($("<th>").addClass("advanced hidden").html("State Class"));
  headerTr$.append($("<th>").addClass("advanced hidden").html("Value Template"));
  headerTr$.append($("<th>").addClass("advanced hidden").html("Unit of Measurement"));
  headerThead$.append(headerTr$);
  $("#HADiscTable").append(headerThead$);

  const headerTbody$ = $("<tbody>");

  // Build table rows from ithostatusinfo
  Object.entries(ithostatusinfo).forEach(([key, value], index) => {
    const row$ = $("<tr>");
    const isDisabled = value === "not available";

    // Include checkbox (default unchecked)
    const includeCheckbox$ = $("<input>", {
      type: "checkbox",
      checked: false,
    });
    const includeTd$ = $("<td>").append(includeCheckbox$);
    row$.append(includeTd$);

    // Label (non-editable)
    row$.append($("<td>").text(key));

    // HA Name (editable, unit of measurement removed)
    const unitMatch = key.match(/\(([^)]+)\)$/); // Extract unit in parentheses
    const cleanName = key.replace(/\s*\([^)]+\)$/, ""); // Remove unit from name
    const nameInput$ = $("<input>", {
      type: "text",
      value: cleanName,
      placeholder: "Name",
    });
    row$.append($("<td>").append(nameInput$));

    // Device Class (editable, advanced)
    const deviceClassInput$ = $("<input>", {
      type: "text",
      class: "advanced hidden",
      placeholder: "Device Class",
    });
    row$.append($("<td>").addClass("advanced hidden").append(deviceClassInput$));

    // State Class (editable, advanced)
    const stateClassInput$ = $("<input>", {
      type: "text",
      class: "advanced hidden",
      placeholder: "State Class",
    });
    row$.append($("<td>").addClass("advanced hidden").append(stateClassInput$));

    // Value Template (editable, advanced, retains unit)
    const valueTemplateInput$ = $("<input>", {
      type: "text",
      class: "advanced hidden",
      placeholder: `{{ value_json['${key}'] }}`,
      value: `{{ value_json['${key}'] }}`,
      "data-default": `{{ value_json['${key}'] }}`, // Store the default value
    });
    row$.append($("<td>").addClass("advanced hidden").append(valueTemplateInput$));

    // Unit of Measurement (editable, advanced, pre-filled if present)
    const unitInput$ = $("<input>", {
      type: "text",
      class: "advanced hidden",
      placeholder: "Unit of Measurement",
      value: unitMatch ? unitMatch[1] : "",
    });
    row$.append($("<td>").addClass("advanced hidden").append(unitInput$));

    headerTbody$.append(row$);
  });

  $("#HADiscTable").append(headerTbody$);

  // Advanced toggle
  $("#" + advancedToggleId).on("change", function () {
    const showAdvanced = $(this).is(":checked");
    $(".advanced").toggleClass("hidden", !showAdvanced);
  });
}

var webapihtml = `
                                                                            <p>The WebAPI implementation follows the JSend specification.<br>
                                                                              More information about JSend can be found on github: <a href="https://github.com/omniti-labs/jsend" target="_blank" rel="noopener noreferrer">https://github.com/omniti-labs/jsend</a>
                                                                            </p>
                                                                            <p>The WebAPI always returns a JSON which will at least contain a key "status".<br>
                                                                              The value of the status key indicates the result of the API call. This can either be "success", "fail" or "error".
                                                                            </p>
                                                                            <p>In case of "success" or "fail":<br>
                                                                              <ul>
                                                                                <li>the returned JSON will always have a "data" key containing the resulting data of the request</li>
                                                                                <li>the value can be a string or a JSON object/array</li>
                                                                                <li>the returned JSON should contain a key "result" that contains a string with a short human readable API call result</li>
                                                                                <li>the returned JSON should contain a key "cmdkey" that conains a string copy of the given command when a URL encoded key/value pair is present in the API call</li>
                                                                              </ul>
                                                                            </p>
                                                                            <p>In case of "error": <br></p>
                                                                            <p>
                                                                              <ul>
                                                                                <li>the returned JSON will at least contain a key "message" with a value of type string, explaining what went wrong</li>
                                                                                <li>the returned JSON could also include a key "code" which contains a status code that should adhere to rfc9110</li>
                                                                              </ul>
                                                                            </p>
                                                                            `;

//
// HTML string literals
//

var html_debug = `
<div id="main" style="max-width: 1600px;">
    <div class="header">
        <h1>Debug page</h1>
    </div><br><br>
    <div>
        <span>Config version: </span><span id='configversion'>unknown</span><br><br>
        <span>Itho I2C connection status: </span><span id='ithoinit'>unknown</span>
    </div>
    <br>
    <span>File system: </span><span id='bfree'></span><span> bytes used / </span><span id='btotal'></span><span> bytes
        total</span><br>
    <a href="#" class="pure-button" onclick="$('#main').empty();$('#main').append( html_edit );">Edit
        filesystem</a><br><br>
    <p>Partition restore: </p>
    <p>Firmware versions prior to 2.4.4-beta7 used a different partition scheme. Older versions work with the new scheme
        but in some cases a restore might be needed.<br>
        After successful repartition, do not restart the module before the firmware flash.
    </p>
    <button id="button-restorepart" class="pure-button">Restore partition</button>&nbsp;<button id="button-checkpart"
        class="pure-button">Check partition</button>&nbsp;<span>Result:&nbsp;</span>&nbsp;<span
        id="chkpart"></span><br><br>

    <p>Download last system crashlog: </p>
    <a href="/getcoredump" class="pure-button">Download crashlog</a><br><br>

    <p>System memory usage: </p>
    <span>CC1101 task memory: </span><span id='cc1101taskmem'></span><span> bytes free</span><br>
    <span>MQTT task memory: </span><span id='mqtttaskmem'></span><span> bytes free</span><br>
    <span>Web task memory: </span><span id='webtaskmem'></span><span> bytes free</span><br>
    <span>Config and Log task memory: </span><span id='cltaskmem'></span><span> bytes free</span><br>
    <span>SysControl task memory: </span><span id='syscontaskmem'></span><span> bytes free</span><br>
    <span>Loop task memory: </span><span id='looptaskmem'></span><span> bytes free</span><br><br>

    <p>JavaScript console debug:</p>
    <button id="jsdebug" class="pure-button pure-button-primary">Toggle</button>
    <span>Status: </span><span id='jsdebug_status'>unknown</span>

    <form class="pure-form pure-form-aligned">
        <fieldset>
            <legend><br>RF debug (only functional with active CC1101 RF module):</legend><br>
            <button id="rfdebug-12761" class="pure-button pure-button-primary">Send 31D9</button>&nbsp;speed:
            <input id="rfdebug-12761-status" type="number" min="0" max="100" size="6" value="0">&nbsp;
            &nbsp;fault:
            <input id="rfdebug-12761-fault" type="number" min="0" max="1" size="6" value="0">&nbsp;
            &nbsp;frost:
            <input id="rfdebug-12761-frost" type="number" min="0" max="1" size="6" value="0">&nbsp;
            &nbsp;filter:
            <input id="rfdebug-12761-filter" type="number" min="0" max="1" size="6" value="0">&nbsp;
            <br><br>
            <button id="rfdebug-12762" class="pure-button pure-button-primary">Send 31DA</button>&nbsp;faninfo:
            <input id="rfdebug-12762-faninfo" type="number" min="0" max="255" size="6"
                value="0">&nbsp;timer:&nbsp;<input id="rfdebug-12762-timer" type="number" min="0" max="255" size="6"
                value="0">&nbsp;//faninfo:0=off,1=low,2=medium,3=high,13=timer3,21=away,24=auto
            <br><br>
            <fieldset>
                <legend><br>I2C extra debug functionality:</legend>
                <p>This option enables an extra menu where more I2C options and logging is available. <br>Enabling the
                    I2C
                    debug menu will also halt I2C bus activity in case of errors to be able to save logging!</p>
                <button id="button-i2cdebugon" class="pure-button pure-button-primary">Debug on</button>
                <button id="button-i2cdebugoff" class="pure-button pure-button-primary">Debug off</button>
                <br>
                <legend><br>I2C sniffer:</legend>
                <p>The i2c sniffer works only on sniffer capable devices (non-cve; all versions, cve; as of hw rev.
                    2.5). <br>See system log for confirmation.<br>
                    Sniffer output is available through syslog. (reboot needed)</p>
                <button id="button-i2csnifferon" class="pure-button pure-button-primary">Sniffer on</button>
                <button id="button-i2csnifferoff" class="pure-button pure-button-primary">Sniffer off</button>
                <br><br>
                <legend><br>Low level Itho I2C commands:</legend><br>
                <button id="ithobutton-type" class="pure-button pure-button-primary">Query Devicetype</button><br>
                <span>Result:&nbsp;</span><span id="ithotype"></span><br><br>
                <button id="ithobutton-statusformat" class="pure-button pure-button-primary">Query Status
                    Format</button><br><span>Result:&nbsp;</span><span id="ithostatusformat"></span><br><br>
                <button id="ithobutton-status" class="pure-button pure-button-primary">Query
                    Status</button><br><span>Result:&nbsp;</span><span id="ithostatus"></span><br><br>
                <button id="button2410" class="pure-button pure-button-primary">Query 2410</button>setting index: <input
                    id="itho_setting_id" type="number" min="0" max="255" size="6"
                    value="0"><br><span>Result:&nbsp;</span><span id="itho2410"></span><br>
                <span>Current:&nbsp;</span><span id="itho2410cur"></span><br>
                <span>Minimum value:&nbsp;</span><span id="itho2410min"></span><br>
                <span>Maximum value:&nbsp;</span><span id="itho2410max"></span><br><br>
                <span style="color:red">Warning!!<br> "Set 2410" changes the settings of your Itho unit<br>Use with care
                    and
                    use only if you know what you are doing!</span><br>
                <button id="button2410set" class="pure-button pure-button-primary">Set 2410</button>setting index:
                <input id="itho_setting_id_set" type="number" min="0" max="255" size="6" value="0"> setting value:
                <input id="itho_setting_value_set" type="number" min="-2147483647" max="2147483647" size="10"
                    value="0"><br>
                <span>Sent command:&nbsp;</span><span id="itho2410set"></span><br><span>Result:&nbsp;</span><span
                    id="itho2410setres"></span><br>
                <span style="color:red">Warning!!</span><br><br>

                <button id="ithobutton-31DA" class="pure-button pure-button-primary">Query
                    31DA</button><br><span>Result:&nbsp;</span>
                <span id="itho31DA"></span><br><br><button id="ithobutton-31D9"
                    class="pure-button pure-button-primary">Query 31D9</button><br><span>Result:&nbsp;</span><span
                    id="itho31D9"></span><br><br>

                <button id="ithobutton-10D0" class="pure-button pure-button-primary">Filter
                    reset</button><br><span>Filter
                    reset function uses virtual remote 0, this remote needs to be paired with your Itho unit for this
                    command
                    to
                    work</span><br><br>

                <button id="buttonC000" class="pure-button pure-button-primary">Send CO2 speed</button>
                Speed1: <input id="itho_c000_speed1" type="number" min="0" max="255" size="4" value="0">&nbsp;Speed2:
                <input id="itho_c000_speed2" type="number" min="0" max="255" size="4" value="0"><br><br>
                <button id="button9298" class="pure-button pure-button-primary">Send CO2 value</button>
                Value: <input id="itho_9298_val" type="number" min="0" max="65535" size="4" value="0"><br><br>
                <button id="button4210" class="pure-button pure-button-primary">Query
                    Counters</button><br><span>Result:&nbsp;</span><span id="ithocounters"></span><br><br>
                <button id="buttonCE30" class="pure-button pure-button-primary">Send CE30</button>
                Set outside temperature to: <input id="itho_ce30_temp" type="number" min="-20" max="50" size="4"
                    value="15"><br>
                Optional temporary temperature: <input id="itho_ce30_temptemp" type="number" min="-20" max="50" size="4"
                    value="0">
                Valid until(timestamp) <input id="itho_ce30_timestamp" type="number" min="0" max="2147483647" size="12"
                    value="0"><br>
                <span>Result:&nbsp;</span><span id="itho_ce30_result"></span><br>
                <br>
                <span style="color:red">Warning!!<br>
                    4030 is low level "manual control" of your itho unit.<br>
                    Use with care and use only if you know what you are doing!</span><br>
                <button id="button4030" class="pure-button pure-button-primary">Set 4030 Manual Control</button>
                Index: <input id="itho_4030_index" type="text" size="5">
                Datatype: <input id="itho_4030_datatype" type="text" size="5">
                Value: <input id="itho_4030_value" type="text" size="5">
                Checked: <input id="itho_4030_checked" ttype="text" size="2"><br>
                Password: "thisisunsafe": <input id="itho_4030_password" type="string" size="15"><br>
                <span>Result:&nbsp;</span><span id="itho_4030_result"></span><br>
                <span style="color:red">
                    WPU 5G: Make sure you set the "Max manual operation time" setting on the "Itho settings" page.<br>
                    The itho unit will remain in manual mode until the timer expires. 0 means unlimited.<br>
                    Warning!!<br></span><br>
            </fieldset><br><br><br>
        </fieldset>
    </form>
</div>
<script>
    $(document).ready(function () {
        getSettings('debugvalues');
        getSettings('sysstat');
        $("#jsdebug_status").text(debug ? "on" : "off");
    });
    $("#jsdebug").click(function () {
        debug = !debug;
        $("#jsdebug_status").text(debug ? "on" : "off");
    });    
</script>
`;

var html_i2cdebug = `
<div class="header">
  <h1>I2C debug</h1>
</div><br><br>
<p></p>
<span>Itho I2C connection status: </span><span id=\'ithoinit\'>unknown</span><br><br>
<span>If the I2C bus is stuck. Please copy the log below and send it to <a
    href="mailto: info@nrg.watch">info@nrg.watch</a> or add it to the issue on
  Github.<br>Also try to reset the Temp/Hum sensor below and see if this releases the I2C bus. If succesful then the I2C
  connection status should return to 'connected'.</span>
<style>
  .pure-form-aligned .pure-control-group label {
    width: 15em;
  }
</style>
<form class="pure-form pure-form-aligned">
  <fieldset>
    <br>
    <legend><br>Last I2C commands:</legend>
    <br>
    <table id="I2CLogTable" class="pure-table pure-table-bordered"></table><br><br>
    <fieldset>
      <legend><br>I2C debug commands and settings:</legend><br>
      <button id=\"ithobutton-shtreset\" class=\"pure-button pure-button-primary\">Reset Temp/Hum
        sensor</button><br><span>Result:&nbsp;</span><span id=\'i2c_sht_reset\'></span><br><br>
    </fieldset>
    <div id="i2clog_outer" class="hidden">
      <div style="display:inline-block;vertical-align:top;overflow:hidden;padding-bottom:5px;">I2C sniffer Log:</div>
      <div id="i2clog"
        style="padding:10px;background-color:black;min-height:30vh;max-height:60vh;font: 0.9rem Inconsolata, monospace;border-radius:7px;overflow:auto;color:#aaa">
      </div>
      <div style="padding-top:5px;">
        <a href="#" class="pure-button" onclick="$('#i2clog').empty()">Clear</a>
      </div>
    </div>
    <form class="pure-form pure-form-aligned">
      <fieldset>
        <legend><br>I2C sniffer mode (works on I2C sniffer capable hardware only, see system log):</legend><br>
        <button id="i2csniffer-1" class="pure-button pure-button-primary">On</button>
        <button id="i2csniffer-0" class="pure-button pure-button-primary">Off</button>
        <br><br>

      </fieldset>
    </form>
    <br><br>
    <script>
      $(document).ready(function () {
        getSettings('sysstat');
        getSettings('i2cdebuglog');
        getSettings('i2cdebugsettings');
      });
    </script>
`;

var html_api = `
<div class="header">
    <h1>IthoWifi - API</h1>
</div>
<h3>API Description</h3>
<strong>General information WebAPI</strong><br><br>
A simple WebAPI is available at the following URL: <a href='api.html' target='_blank'>api.html</a><br><br>
The request should be formatted as follows: <br>http://[DNS or IP]/api.html?[param]=[value]<br><br>
ie. http://192.168.4.1/api.html?command=medium<br>
or<br>
http://192.168.4.1/api.html?speed=150&timer=15<br><br>
Unless specified otherwise:<br>
<div id="webapitxt">
    <ul>
        <li>A successful command will return 'OK', an unsuccessful command will return 'NOK'</li>
        <li>String params/values are supplied without quote marks</li>
        <li>Values outside specified values/ranges will be ignored or 0 in case of an overflow</li>
    </ul>
</div>
<br>
<strong>General information MQTT API</strong><br><br>
Unless specified otherwise:<br>
<ul>
    <li>The command must be sent as valid JSON</li>
    <li>The command must be sent to the command topic</li>
    <li>Values outside specified key/value ranges will be ignored or 0 in case of an overflow</li>
    <li>String values must be supplied with quote marks in accordance with JSON standards</li>
</ul>
<br>
<strong>API table:</strong>
<table class="pure-table pure-table-bordered" style="font-size:.85em">
    <thead>
        <tr>
            <th>key or param</th>
            <th>datatype</th>
            <th style="width:160px">value</th>
            <th>datatype</th>
            <th style="text-align:center">MQTT<br>(JSON)</th>
            <th style="text-align:center">WebAPI<br>(URL params)</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td colspan="6"><b>Commands below this line are expected to work on all Itho devices and add-on
                    versions.</b></td>
        </tr>
        <tr>
            <td>dtype</td>
            <td>string</td>
            <td>ithofan</td>
            <td>string</td>
            <td style="text-align:center">●</td>
            <td style="text-align:center">◌</td>
        </tr>
        <tr>
            <td colspan="6">Comments:<br><em>If Domoticz MQTT support is on and commands originate from other than
                    configured IDX, this key/value pair needs to be present for commands to get processed.</em></td>
        </tr>
        <tr>
            <td>vremotecmd</td>
            <td>string</td>
            <td>away, low, medium, high, timer1, timer2, timer3, join, leave, auto, autonight, cook30, cook60</td>
            <td>string</td>
            <td style="text-align:center">●</td>
            <td style="text-align:center">●</td>
        </tr>
        <tr>
            <td colspan="6">Comments:<br><em>These commands emulate a normal physical remote, available commands depend
                    on type of remote configured to emulate. For these commands to work, the virtual remote needs to be
                    activated and joined with the Itho unit first. If the "vremoteindex" or "vremotename" key is not
                    present, the first virtual remote will be used.</em></td>
        </tr>
        <tr>
            <td>vremoteindex</td>
            <td>string</td>
            <td>0-11</td>
            <td>number</td>
            <td style="text-align:center">●</td>
            <td style="text-align:center">●</td>
        </tr>
        <tr>
            <td colspan="6">Comments:<br><em>The vremoteindex key/value enables the selection of a specific virtual
                    remote if more than 1 virtual remote is configured. The index can be found on the "Virtual remotes"
                    page. If both "vremoteindex" and "vremotename" are provided, "vremotename" will be used.</em></td>
        </tr>
        <tr>
            <td>vremotename</td>
            <td>string</td>
            <td>name</td>
            <td>string</td>
            <td style="text-align:center">●</td>
            <td style="text-align:center">●</td>
        </tr>
        <tr>
            <td colspan="6">Comments:<br><em>The vremotename key/value selects a specific virtual remote based on the
                    name configured. The name can be configured through the "Virtual remotes" page. If more than one
                    remote exists with the same name, the name match with the lowest index number will be used.</em>
            </td>
        </tr>
        <tr>
            <td>vremote</td>
            <td colspan="5">see "vremotecmd"</td>
        </tr>
        <tr>
            <td>username</td>
            <td>string</td>
            <td>max 20 chars long</td>
            <td>string</td>
            <td style="text-align:center">◌</td>
            <td style="text-align:center">●</td>
        </tr>
        <tr>
            <td>password</td>
            <td>string</td>
            <td>max 20 chars long</td>
            <td>string</td>
            <td style="text-align:center">◌</td>
            <td style="text-align:center">●</td>
        </tr>
        <tr>
            <td>clearqueue</td>
            <td>string</td>
            <td>true</td>
            <td>string</td>
            <td style="text-align:center">●</td>
            <td style="text-align:center">◌</td>
        </tr>
        <tr>
            <td colspan="6">Comments:<br><em>Clear all timers on the queue, scheduled to run after all other commands
                    have been processed. Speed will fallback to last value before items got enqueued</em></td>
        </tr>
        <tr>
            <td>get</td>
            <td>string</td>
            <td>ithostatus</td>
            <td>JSON</td>
            <td style="text-align:center">●</td>
            <td style="text-align:center">●</td>
        </tr>
        <tr>
            <td colspan="6">Comments:<br><em>Returns JSON with all available sensor data, status data and system
                    information. Available keys depend on Itho device and firmware version. Return type present on MQTT
                    "Itho status topic"</em></td>
        </tr>
        <tr>
            <td>get</td>
            <td>string</td>
            <td>remotesinfo</td>
            <td>JSON</td>
            <td style="text-align:center">●</td>
            <td style="text-align:center">●</td>
        </tr>
        <tr>
            <td colspan="6">Comments:<br><em>Returns JSON with all configured remotes where key=remote name, value is
                    JSON with all received capabilities of the remote. Depending on make and model this can be the last
                    command, temperature, humidity, battery and/or co2 levels. Return type present on MQTT "Remotes info
                    topic".</em></td>
        </tr>
        <tr>
            <td>get</td>
            <td>string</td>
            <td>deviceinfo</td>
            <td>JSON</td>
            <td style="text-align:center">●</td>
            <td style="text-align:center">●</td>
        </tr>
        <tr>
            <td colspan="6">Comments:<br><em>Returns JSON with device information on the add-on and itho device
                    connected (as of WebAPIv2). Return type present on MQTT "Device info topic".</em></td>
        </tr>
        <tr>
            <td colspan="6"><b>Commands below this line work on Itho devices that support the PWM2IC2 protocol. Devices
                    supported are at least the HRU200 and all CVE models. Devices known not to support these commands
                    are the HRU350, WPU, DemandFlow/QualityFlow. These commands cannot be used together with vremote
                    commands in one API call.</b></td>
        </tr>
        <tr>
            <td>speed</td>
            <td>string</td>
            <td>0-255</td>
            <td>number</td>
            <td style="text-align:center">●</td>
            <td style="text-align:center">●</td>
        </tr>
        <tr>
            <td colspan="6">Comments:<br><em>Speed without a timer will reset the queue (different behaviour
                    configurable) and set a new base/fallback speed.<br>For MQTT; sending only the value instead of a
                    JSON key/value pair also works for single commands</em></td>
        </tr>
        <tr>
            <td>command</td>
            <td>string</td>
            <td>low, medium, high, timer1, timer2, timer3, clearqueue</td>
            <td>string</td>
            <td style="text-align:center">●</td>
            <td style="text-align:center">●</td>
        </tr>
        <tr>
            <td colspan="6">Comments:<br><em>Resulting speed/timer settings are configurable. Value without timer sets
                    the base/fallback speed of the fan. Timers will be queued on highest speed setting first for the
                    duration of the timer.<br>For MQTT; sending only the value instead of a JSON key/value pair also
                    works for single commands</em></td>
        </tr>
        <tr>
            <td>timer</td>
            <td>string</td>
            <td>0-65535</td>
            <td>number</td>
            <td style="text-align:center">●</td>
            <td style="text-align:center">●</td>
        </tr>
        <tr>
            <td colspan="6">Comments:<br><em>only effective with "command" or "speed" key/param present, could overrule
                    timer value of timer1, timer2, timer3. Highest speed setting on the queue will be active for the
                    duration of the timer.</em></td>
        </tr>
        <tr>
            <td>get</td>
            <td>string</td>
            <td>currentspeed</td>
            <td>string</td>
            <td style="text-align:center">◌</td>
            <td style="text-align:center">●</td>
        </tr>
        <tr>
            <td colspan="6">Comments:<br><em>Returns current active Itho speed setting in range 0-255</em></td>
        </tr>
        <tr>
            <td></td>
            <td></td>
            <td>0-255</td>
            <td>number</td>
            <td style="text-align:center">●</td>
            <td style="text-align:center">◌</td>
        </tr>
        <tr>
            <td colspan="6">Comments:<br><em>Return type present on MQTT "State topic"</em></td>
        </tr>
        <tr>
            <td colspan="6"><b>Commands only for WPU devices</b></td>
        </tr>
        <tr>
            <td>outside_temp</td>
            <td>number</td>
            <td>outside_temp,temporary_outside_temp,valid_until</td>
            <td>number</td>
            <td style="text-align:center">●</td>
            <td style="text-align:center">●</td>
        </tr>
        <tr>
            <td colspan="6">
                Comments:<br>
                <em>
                    With this command an outside temperature can be send to a WPU. Unset values
                    will default to 0. <b>valid_until</b> = epoch now + valid time. <b>temporary_outside_temp</b> will
                    be used by the WPU during this valid time. After the valid time has
                    passed it will fallback to <b>outside_temp</b>.
                </em>
                <br><br>
                <em>
                    The WebAPI only supports the <b>outside_temp</b> setting and version 2 of the WebAPI must be used.
                </em>
            </td>
        </tr>
        <tr>
            <td>manual control</td>
            <td>json</td>
            <td>see comments</td>
            <td>json</td>
            <td style="text-align:center">●</td>
            <td style="text-align:center">◌</td>
        </tr>
        <tr>
            <td colspan="6">
                Comments:<br>
                <em>
                    Warning!!
                    Manual control ie. the 4030 command is low level "manual control" of your itho unit.
                    Use with care and use only if you know what you are doing!
                    WPU 5G: Make sure you set the "Max manual operation time" setting in the settings page.
                    The itho unit will remain in manual mode until the timer expires. 0 means unlimited.
                    <br>
                    <br>
                    json keys explaination:<br>
                    "manual_operation_index": manual_operation_index description (dataype uint16_t)<br>
                    "manual_operation_datatype": manual_operation_datatype description (dataype uint8_t)<br>
                    "manual_operation_value": manual_operation_value description (dataype uint16_t)<br>
                    "manual_operation_checked": manual_operation_checked description (dataype uint8_t)<br><br>
                    example json:<br>
                    "{"manual_operation_index":1, "manual_operation_datatype":1,
                    "manual_operation_value": 1, "manual_operation_checked":1}"<br><br>
                    info: missing keys or incorrect data will default to the value 0.<br>
                    <br>
                    index = 0 : Outside temperature <br>
                    index = 15 : High/low tariff. (0/1) (Force boiler on at low tariff) <br>
                    index = 20 : Source pump speed (0-100) <br>
                    index = 30 : Max relative modulation level (0-100) (total heat demand, force/block heating) <br>
                    index = 31 : Electric element release (0/1) <br>
                    index = 32 : CH (heating) released (0/1) <br>
                    index = 33 : Cooling mode released (0/1) <br>
                    index = 36 : Release tap water (boiler). 0=Eco. 2=Comfort. 3=Blocked. <br>
                    index = 37 : Reset all faults. <br>
                </em>
            </td>
        </tr>
        <tr>
            <td colspan="6"><b>Commands only for devices with CC1101 module</b></td>
        </tr>
        <tr>
            <td>rfremotecmd</td>
            <td>string</td>
            <td>away, low, medium, high, timer1, timer2, timer3, join, leave, auto, autonight, cook30, cook60,
                motion_on, motion_off</td>
            <td>string</td>
            <td style="text-align:center">●</td>
            <td style="text-align:center">●</td>
        </tr>
        <tr>
            <td colspan="6">Comments:<br><em>These commands emulate a normal physical remote using the CC1101 module and
                    a RF signal,
                    available commands depend
                    on type of remote configured to emulate. For these commands to work, the rf remote needs to be
                    joined with the Itho unit first. This can be done with a physical remote or with the RF remote
                    buttons on the RF devices page.
                    If the "rfremoteindex" key is not present, the first RF remote will be used.</em></td>
        </tr>
        <tr>
            <td>rfremoteindex</td>
            <td>string</td>
            <td>0-11</td>
            <td>number</td>
            <td style="text-align:center">●</td>
            <td style="text-align:center">●</td>
        </tr>
        <tr>
            <td colspan="6">Comments:<br><em>The rfremoteindex key/value enables the selection of a specific RF
                    remote if more than 1 RF remote is configured. The index can be found on the "RF devices"
                    page.</em></td>
        </tr>
        <tr>
            <td>getsetting</td>
            <td>string</td>
            <td>0-255</td>
            <td>number</td>
            <td style="text-align:center">◌</td>
            <td style="text-align:center">●</td>
        </tr>
        <tr>
            <td colspan="6">
                Comments:<br>
                <em>
                    Returns a JSON object containing the result of the API call. If successful it contains a data object
                    with the current, minimum and
                    maximum value of the given setting, using its index. If the
                    setting index is invalid, the data object contains a key failreason.
                </em>
            </td>
        </tr>
        <tr>
            <td colspan="6"><b style="color: red">API Commands below this line can change the settings of your Itho
                    Daalderop
                    unit, and this may affect its behaviour (i.e. turn it to a non working state).
                    Only use this part of the API if you know what you're doing and are
                    certain it won't damage your unit.
                </b></td>
        </tr>
        <tr>
            <td>setsetting</td>
            <td>string</td>
            <td>0-255</td>
            <td>number</td>
            <td style="text-align:center">◌</td>
            <td style="text-align:center">●</td>
        </tr>
        <tr>
            <td>value</td>
            <td>string</td>
            <td>any number</td>
            <td>number</td>
            <td style="text-align:center">◌</td>
            <td style="text-align:center">●</td>
        </tr>
        <tr>
            <td colspan="6">
                Comments:<br>
                <em>
                    Sets the current value of a setting using its index. The
                    value must be specified in the "value" parameter. The new
                    value must be within the minimum and maximum of the setting.<br>
                    Returns a JSON object containing the result of the API call. If successful it contains a data object
                    with the current, previous, minimum and
                    maximum value of the given setting, using its index. If the
                    setting index or value is invalid, the data object contains a key failreason.
                </em>
                <br>
                <br>
                Example:<br>
                <em>
                    http://192.168.4.1/api.html?setsetting=4&value=10
                </em>
            </td>
        </tr>
    </tbody>
</table>
<p><br><br></p>
<script>
    $(document).ready(function () {
        getSettings('syssetup');
        setTimeout(function () {
            if (localStorage.getItem("api_version") == "2") {
                //$('#webapitxt').html("");
                $('#webapitxt').html(webapihtml);
            }
        }, 500);
    });
</script>
`;

var html_systemsettings_end = `
<div class="pure-controls">
  <button id="syssumbit" class="pure-button pure-button-primary">Save</button>
</div>
`;

var html_ithostatus = `
<div class="header">
  <h1>Itho status</h1>
</div>
<p>System values of the Itho unit<br><br>Also available on the MQTT API topic 'itho/ithostatus' and WebAPI using
  '/api.html?get=ithostatus'.</p>
<p>The list of available labels depends on the Itho model/firmware version and is
  generated
  automatically using this Itho model/firmware version information.</p>
<p>A working I2C connection is needed for these
  status labels to get populated and updated.</p>
<span>Itho I2C connection status: </span><span id=\'ithoinit\'>unknown</span><br><br>
<style>
  .pure-form-aligned .pure-control-group label {
    width: 15em;
  }
</style>
<form class="pure-form pure-form-aligned">
  <fieldset>
    <table id="StatusTable" class="pure-table pure-table-bordered"></table><br><br>
  </fieldset>
</form>
<script>
  $(document).ready(function () {
    function repeat() {
      getSettings('ithostatus');
      ithostatus_to = setTimeout(repeat, 5000);
    }
    repeat();
  });
</script>
`;

var html_wifisetup = `
<div class="header">
  <h1>Wifi setup</h1>
</div>
<div class="pure-g">
  <div class="pure-u-1 pure-u-md-3-5">
    <form class="pure-form pure-form-aligned" id="wifiform" action="#">
      <fieldset>
        <div class="pure-control-group">
          <label for="ssid">SSID</label>
          <input id="ssid" maxlength="64" type="text"
            oninput="if(this.value.length > 32) { this.value = this.value.substring(0, 32); document.getElementById('ssid-msg').innerHTML = 'SSID truncated to 32 characters.'; } else { document.getElementById('ssid-msg').innerHTML = ''; }">
          <span id="ssid-msg" style="color: red;"></span>
        </div>
        <div class="pure-control-group">
          <label for="passwd">Password</label>
          <input id="passwd" type="Password" maxlength="65" type="text"
            oninput="if(this.value.length > 64) { this.value = this.value.substring(0, 64); document.getElementById('passwd-msg').innerHTML = 'Password truncated to 64 characters.'; } else { document.getElementById('passwd-msg').innerHTML = ''; }">
          <span id="passwd-msg" style="color: red;"></span>
        </div>
        <div class="pure-control-group">
          <label>Show Password</label>
          <input type="checkbox" onclick="togglePwd()">
        </div>
        <div class="pure-controls">
          <button id="wifisubmit" class="pure-button pure-button-primary">Save</button>&nbsp;&nbsp;
          <button id="reboot" class="pure-button">Reboot</button>
        </div>
        <div id="rebootscript"></div>
        <br>
        <div class="pure-control-group">
          <label for="option-dhcp" class="pure-radio">Use DHCP</label>
          <input id="option-dhcp-on" type="radio" name="option-dhcp" onchange='radio("dhcp", "on")' value="on"> on
          <input id="option-dhcp-off" type="radio" name="option-dhcp" onchange='radio("dhcp", "off")' value="off"> off
        </div>
        <div class="pure-control-group">
          <label for="hostname">Hostname</label>
          <input id="hostname" type="text">
        </div>
        <div class="pure-control-group">
          <label for="ip">IP address</label>
          <input id="ip" type="text">
        </div>
        <div class="pure-control-group">
          <label for="subnet">Subnet</label>
          <input id="subnet" type="text">
        </div>
        <div class="pure-control-group">
          <label for="gateway">Gateway</label>
          <input id="gateway" type="text">
        </div>
        <div class="pure-control-group">
          <label for="dns1">DNS server 1</label>
          <input id="dns1" type="text">
        </div>
        <div class="pure-control-group">
          <label for="dns2">DNS server 2</label>
          <input id="dns2" type="text">
        </div>
        <div class="pure-control-group">
          <label for="ntpserver">NTP server</label>
          <input id="ntpserver" type="text">
        </div>
        <div class="pure-control-group">
          <label for="timezone">Timezone</label>
          <select name="timezone" id="timezone">
            <option value="Europe/Amsterdam" selected>Europe/Amsterdam</option>
            <option value="Europe/Andorra">Europe/Andorra</option>
            <option value="Europe/Athens">Europe/Athens</option>
            <option value="Europe/Belgrade">Europe/Belgrade</option>
            <option value="Europe/Berlin">Europe/Berlin</option>
            <option value="Europe/Bratislava">Europe/Bratislava</option>
            <option value="Europe/Brussels">Europe/Brussels</option>
            <option value="Europe/Bucharest">Europe/Bucharest</option>
            <option value="Europe/Budapest">Europe/Budapest</option>
            <option value="Europe/Busingen">Europe/Busingen</option>
            <option value="Europe/Chisinau">Europe/Chisinau</option>
            <option value="Europe/Copenhagen">Europe/Copenhagen</option>
            <option value="Europe/Dublin">Europe/Dublin</option>
            <option value="Europe/Gibraltar">Europe/Gibraltar</option>
            <option value="Europe/Guernsey">Europe/Guernsey</option>
            <option value="Europe/Helsinki">Europe/Helsinki</option>
            <option value="Europe/Isle_of_Man">Europe/Isle_of_Man</option>
            <option value="Europe/Istanbul">Europe/Istanbul</option>
            <option value="Europe/Jersey">Europe/Jersey</option>
            <option value="Europe/Kaliningrad">Europe/Kaliningrad</option>
            <option value="Europe/Kyiv">Europe/Kyiv</option>
            <option value="Europe/Kirov">Europe/Kirov</option>
            <option value="Europe/Lisbon">Europe/Lisbon</option>
            <option value="Europe/Ljubljana">Europe/Ljubljana</option>
            <option value="Europe/London">Europe/London</option>
            <option value="Europe/Luxembourg">Europe/Luxembourg</option>
            <option value="Europe/Madrid">Europe/Madrid</option>
            <option value="Europe/Malta">Europe/Malta</option>
            <option value="Europe/Mariehamn">Europe/Mariehamn</option>
            <option value="Europe/Minsk">Europe/Minsk</option>
            <option value="Europe/Monaco">Europe/Monaco</option>
            <option value="Europe/Moscow">Europe/Moscow</option>
            <option value="Europe/Oslo">Europe/Oslo</option>
            <option value="Europe/Paris">Europe/Paris</option>
            <option value="Europe/Podgorica">Europe/Podgorica</option>
            <option value="Europe/Prague">Europe/Prague</option>
            <option value="Europe/Riga">Europe/Riga</option>
            <option value="Europe/Rome">Europe/Rome</option>
            <option value="Europe/Samara">Europe/Samara</option>
            <option value="Europe/San_Marino">Europe/San_Marino</option>
            <option value="Europe/Sarajevo">Europe/Sarajevo</option>
            <option value="Europe/Saratov">Europe/Saratov</option>
            <option value="Europe/Simferopol">Europe/Simferopol</option>
            <option value="Europe/Skopje">Europe/Skopje</option>
            <option value="Europe/Sofia">Europe/Sofia</option>
            <option value="Europe/Stockholm">Europe/Stockholm</option>
            <option value="Europe/Tallinn">Europe/Tallinn</option>
            <option value="Europe/Tirane">Europe/Tirane</option>
            <option value="Europe/Ulyanovsk">Europe/Ulyanovsk</option>
            <option value="Europe/Uzhgorod">Europe/Uzhgorod</option>
            <option value="Europe/Vaduz">Europe/Vaduz</option>
            <option value="Europe/Vatican">Europe/Vatican</option>
            <option value="Europe/Vienna">Europe/Vienna</option>
            <option value="Europe/Vilnius">Europe/Vilnius</option>
            <option value="Europe/Volgograd">Europe/Volgograd</option>
            <option value="Europe/Warsaw">Europe/Warsaw</option>
            <option value="Europe/Zagreb">Europe/Zagreb</option>
            <option value="Europe/Zaporizhzhia">Europe/Zaporizhzhia</option>
            <option value="Europe/Zurich">Europe/Zurich</option>
            <option value="Etc/Greenwich">Etc/Greenwich</option>
            <option value="Etc/Universal">Etc/Universal</option>
          </select>
        </div>
        <div class="pure-control-group">
          <label for="aptimeout">AP time out (min)</label>
          <input id="aptimeout" type="number" min="0" max="255" size="6"
            title="0-255 minutes, 0: AP always off, 255: always on">
        </div>
        <div class="pure-control-group">
          <label for="appasswd">AP Password</label>
          <input id="appasswd" maxlength="65" type="text"
            oninput="if(this.value.length > 64) { this.value = this.value.substring(0, 64); document.getElementById('appasswd-msg').innerHTML = 'AP Password truncated to 64 characters.'; } else { document.getElementById('appasswd-msg').innerHTML = ''; }">
          <span id="appasswd-msg" style="color: red;"></span>
        </div>

      </fieldset>
    </form>
    <br><br>
    <table class="pure-table pure-table-bordered wifiinfo" style="margin-left:auto;margin-right:auto;">
      <thead style="white-space: nowrap;">
        <tr>
          <th colspan="2">WiFi satus:</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td>AP active:</td>
          <td><span name="apactive">unknown</span></td>
        </tr>
        <tr>
          <td>AP remaining:</td>
          <td><span name="apremain">unknown</span></td>
        </tr>
        <tr>
          <td>AP IP:</td>
          <td><span name="apip">unknown</span></td>
        </tr>
        <tr>
          <td>AP SSID:</td>
          <td><span name="apssid">unknown</span></td>
        </tr>
        <tr>
          <td>WiFi SSID:</td>
          <td><span name="wifissid">unknown</span></td>
        </tr>
        <tr>
          <td>WiFi status:</td>
          <td><span name="wificonnstat">unknown</span></td>
        </tr>
        <tr>
          <td>WiFi IP:</td>
          <td><span name="wifiip">unknown</span></td>
        </tr>
      </tbody>
    </table>
    <br><br><br><br>
  </div>
  <div class="pure-u-1 pure-u-md-2-5">
    <div>
      <div><button id="wifiscan" class="pure-button pure-button-active">Scan</button></div>
    </div>
    <div class="hidden">
      <div>
        <p>Scan results:</p>
      </div>
    </div>
    <div id="wifiscanresult"></div>
    <br><br><br>
  </div>
</div>
<script>
  function togglePwd() {
    var x = document.getElementById('passwd');
    if (x.type === 'password') { x.type = 'text'; }
    else { x.type = 'password'; }
  }
  $(document).ready(function () {
    getSettings('wifisetup');
    function repeat_wifistat() {
      getSettings('wifistat');
      wifistat_to = setTimeout(repeat_wifistat, 1000);
    }
    repeat_wifistat();
  });

</script>
`;

var html_edit = `
<div class="header">
  <h1>File editor</h1>
</div>
<p>Be very careful, use only if absolutely necessary!</p>
<p>To activate a changed config file; go to the reset page, check the 'Don't save config' checkbox and reboot.</p><br>
<iframe id="editor" width="100%" height="100%" style="border:none;padding:5px" srcdoc="<p>Loading...</p>"></iframe>
<script>
  $(document).ready(function () {
    $('#main').css('max-width', '1200px');
    setTimeout(function () {
      var iframe = document.getElementById('editor');
      iframe.style.height = '500px';
      iframe.removeAttribute('srcdoc');
      iframe.src = '/edit.html';
    }, 500);

  });
</script>
`;

var html_update = `
<div class="header">
  <h1>Update firmware</h1>
</div>
<br><br>
<span style="color: #333">Current system firmware:</span>
<hr style="border-top: 1px solid #eee">
<div class="pure-control-group">
  <label>Current firmware version:</label>
  <label id="firmware_ver">unknown</label>
</div>
<br>
<div class="pure-control-group">
  <label for="hardware_rev">Hardware revision:</label>
  <label id="hardware_rev">unknown</label>
</div>
<br><br>
<span style="color: #333">Available firmwares:</span>
<hr style="border-top: 1px solid #eee">
<div class="pure-control-group">
  <label for="latest_fw">Latest firmware version:</label>
  <label id="latest_fw">unknown</label>&nbsp;&nbsp;<a target="_blank" href="" id="release_notes"
    class="pure-button pure-button hidden">Release notes</a><br>
  <a href="" id="latest_fw_button" class="pure-button pure-button-primary hidden">Download firmware file</a>
</div>
<br>
<div id="beta_fw" class="pure-control-group hidden">
  <label for="latest_beta_fw">Latest beta firmware version:</label>
  <label id="latest_beta_fw">unknown</label>&nbsp;&nbsp;<a target="_blank" href="" id="release_beta_notes"
    class="pure-button pure-button hidden">Release notes</a><br>
  <a href="" id="latest_beta_fw_button" class="pure-button pure-button-primary hidden">Download beta firmware
    file</a><br><br>
</div>
<div class="pure-control-group">
  <label for="show_beta_fw">Show beta firmware version:</label>
  <input id="show_beta_fw" type="checkbox" onclick="toggleBetaFW()">
</div>
<br>
<span>Other firmware versions can be found here:</span>
<span id="other_firmware"></span>
<br>
<form class="pure-form pure-form-stacked" method='POST' action='#' enctype='multipart/form-data' id='updateform'>
  <fieldset>
    <legend><br>Update the firmware of your device:</legend>
    <ol>
      <li>Download a firmware file</li>
      <li>Select the downloaded firmware file with "Choose file" button</li>
      <li>Click update and wait for the process to finish</li>
    </ol>
    <input type='file' name='update'><br>
    <button id="updatesubmit" class="pure-button pure-button-primary">Update</button>
  </fieldset>
  <p id="uploadprg" style="display: none;">File upload progress: 0%</p>
  <div id="uploadProgress" style="border-radius: 20px;max-width: 300px;background-color: #ccc;display: none;">
    <div id="uploadBar" style="border-radius: 20px;width: 10%;height: 20px;background-color: #999;"></div>
  </div>
  <p id="updateprg" style="display: none;">Firmware update progress: 0%</p>
  <div id="updateProgress" style="border-radius: 20px;max-width: 300px;background-color: #ccc;display: none;">
    <div id="updateBar" style="border-radius: 20px;width: 10%;height: 20px;background-color: #999;"></div>
  </div>
  <p id="time" style="display: none;">This page will reload to the start page in... </p>
  <br><br>
</form>
<script>
  $('#firmware_ver').text(fw_version);
  $('#hardware_rev').text(hw_revision);
  $('#other_firmware').append('<a target="_blank" href="https://github.com/arjenhiemstra/ithowifi/tree/master/compiled_firmware_files/unified_hw2_noncve">link</a>');
  
  function process(key, value) {
    if (key == hw_revision) {
      let latest_fw = value.latest_fw;
      let download_link = value.link;
      if (latest_fw == fw_version) {
        $('#latest_fw').text(' firmware is up-to-date');
      }
      else {
        $('#latest_fw').text(latest_fw);
        $('#latest_fw_button, #release_notes').removeClass('hidden');
        $('#latest_fw_button').attr("href", download_link);
        $('#release_notes').attr("href", "https://github.com/arjenhiemstra/ithowifi/releases/tag/Version-" + latest_fw);
      }
      let latest_beta_fw = value.latest_beta_fw;
      let download_beta_link = value.link_beta;
      if (latest_beta_fw == fw_version) {
        $('#latest_beta_fw').text(' firmware is up-to-date');
      }
      else {
        $('#latest_beta_fw').text(latest_beta_fw);
        $('#latest_beta_fw_button, #release_beta_notes').removeClass('hidden');
        $('#latest_beta_fw_button').attr("href", download_beta_link);
        $('#release_beta_notes').attr("href", "https://github.com/arjenhiemstra/ithowifi/releases/tag/Version-" + latest_beta_fw);
      }
    }
  }

  function traverse(o, func) {
    for (var i in o) {
      func.apply(this, [i, o[i]]);
      if (o[i] !== null && typeof (o[i]) == 'object') {
        traverse(o[i], func);
      }
    }
  }

  $.ajax({
    type: 'GET',
    url: 'https://raw.githubusercontent.com/arjenhiemstra/ithowifi/master/compiled_firmware_files/firmware.json',
    dataType: 'json',
    timeout: 3000,
    success: function (data) {
      traverse(data, process);
    },
    error: function (xhr, type) {
      if (on_ap) {
        $('#latest_fw, #latest_beta_fw').text(' firmware check not possible on Access Point mode');
      }
      else {
        $('#latest_fw, #latest_beta_fw').text(' firmware check failed, no internet connection?');
      }

    }
  })

  function toggleBetaFW() {
    var x = document.getElementById('beta_fw');
    if (x.classList.contains('hidden')) { x.classList.remove('hidden'); }
    else { x.classList.add('hidden'); }
  }


</script>
`;

var html_systemsettings_start = `
<div class="header">
  <h1>System settings</h1>
</div>
<p>Configuration of add-on (security) settings.</p>
<style>
  .pure-form-aligned .pure-control-group label {
    width: 15em;
  }
</style>
<form class="pure-form pure-form-aligned">
  <fieldset id="sys_fieldset">
    <legend><br>System security:</legend>
    <div class="pure-control-group">
      <label for="sys_username">Username</label>
      <input id="sys_username" maxlength="64" type="text"
        oninput="if(this.value.length > 32) { this.value = this.value.substring(0, 32); document.getElementById('username-msg').innerHTML = 'Username truncated to 32 characters.'; } else { document.getElementById('username-msg').innerHTML = ''; }">
      <span id="username-msg" style="color: red;"></span>
    </div>
    <div class="pure-control-group">
      <label for="sys_password">Password</label>
      <input id="sys_password" maxlength="64" type="text"
        oninput="if(this.value.length > 32) { this.value = this.value.substring(0, 32); document.getElementById('password-msg').innerHTML = 'Password truncated to 32 characters.'; } else { document.getElementById('password-msg').innerHTML = ''; }">
      <span id="password-msg" style="color: red;"></span>
    </div>
    <div class="pure-control-group">
      <label for="option-syssec_web" class="pure-radio">Web interface authentication</label>
      <input id="option-syssec_web-1" type="radio" name="option-syssec_web" value="1"> on
      <input id="option-syssec_web-0" type="radio" name="option-syssec_web" value="0"> off
    </div>
    <div class="pure-control-group">
      <label for="option-syssec_api" class="pure-radio">API authentication</label>
      <input id="option-syssec_api-1" type="radio" name="option-syssec_api" value="1"> on
      <input id="option-syssec_api-0" type="radio" name="option-syssec_api" value="0"> off
    </div>
    <div class="pure-control-group">
      <label for="option-syssec_edit" class="pure-radio">File editor authentication</label>
      <input id="option-syssec_edit-1" type="radio" name="option-syssec_edit" value="1"> on
      <input id="option-syssec_edit-0" type="radio" name="option-syssec_edit" value="0"> off
    </div>
    <legend><br>API settings:</legend>
    <p>WebAPI version</p>
    <div class="pure-control-group">
      <label for="option-api_version" class="pure-radio">WebAPI version</label>
      <input id="option-api_version-1" type="radio" name="option-api_version" value="1"> 1
      <input id="option-api_version-2" type="radio" name="option-api_version" value="2"> 2
    </div>
    <p>Have api keys on the WebAPI, MQTT API and Itho Status page normlized (all lowercase, no spaces and special
      characters).</p>
    <div class="pure-control-group">
      <label for="option-api_normalize" class="pure-radio">Normalize keys</label>
      <input id="option-api_normalize-1" type="radio" name="option-api_normalize" value="1"> on
      <input id="option-api_normalize-0" type="radio" name="option-api_normalize" value="0"> off
    </div>
    <p>Enable the WebAPI for updating your device's settings.</p>
    <div class="pure-control-group">
      <label for="option-api_settings" class="pure-radio">Enable update settings API</label>
      <input id="option-api_settings-1" type="radio" name="option-api_settings" value="1"> on
      <input id="option-api_settings-0" type="radio" name="option-api_settings" value="0"> off
    </div>
    <div class="pure-control-group">
      <label for="api_settings_activated">Activate settings indexes</label>
      <input id="api_settings_activated" title="Must be a valid JSON array ie.: [12,34]" type="text" maxlength="1024"
        size="20">
    </div>
    <p>
      <b style="color: red">Warning:</b>
      using this part of the API incorrectly may result in
      your Itho device not working as intended. Only use this part of the API if you're
      certain it won't break your device.
    </p>
    <legend><br>Speed settings (CVE only) (0-255):</legend>
    <div class="pure-control-group">
      <label for="itho_fallback">Start/fallback speed</label>
      <input id="itho_fallback" type="number" min="0" max="255" size="6">
    </div>
    <div class="pure-control-group">
      <label for="itho_low">Low</label>
      <input id="itho_low" type="number" min="0" max="255" size="6">
    </div>
    <div class="pure-control-group">
      <label for="itho_medium">Medium</label>
      <input id="itho_medium" type="number" min="0" max="255" size="6">
    </div>
    <div class="pure-control-group">
      <label for="itho_high">High</label>
      <input id="itho_high" type="number" min="0" max="255" size="6">
    </div>
    <legend><br>Timer settings (0-255 minutes):</legend>
    <div class="pure-control-group">
      <label for="itho_timer1">Timer1</label>
      <input id="itho_timer1" type="number" min="0" max="255" size="6">
    </div>
    <div class="pure-control-group">
      <label for="itho_timer2">Timer2</label>
      <input id="itho_timer2" type="number" min="0" max="255" size="6">
    </div>
    <div class="pure-control-group">
      <label for="itho_timer3">Timer3</label>
      <input id="itho_timer3" type="number" min="0" max="255" size="6">
    </div>
    <legend><br>Itho status update frequency (0-65535 seconds):</legend>
    <p>Controls the rate at which sensor data, status data and system information is requested and updated on the API
      (Web/MQTT)</p>
    <div class="pure-control-group">
      <label for="itho_updatefreq">Update frequency</label>
      <input id="itho_updatefreq" type="number" min="0" max="65535" size="6">
    </div>
    <p>WPU-only: WPU counters do not require frequent updates. Set update frequency to 1 hour (3600 s) or more:</p>
    <div class="pure-control-group">
      <label for="itho_counter_updatefreq">Counter update frequency</label>
      <input id="itho_counter_updatefreq" type="number" min="0" max="65535" size="6">
    </div>
    <legend><br>Virtual remote settings (reboot needed):</legend>
    <p>The add-on can present itself as a virtual remote. A virtual remote emulates a physical remote through software.
      A virtual remote must be joined to the Itho unit before it can be used.</p>
    <p>A join command will only be accepted by the Itho unit within the first 2 minutes after a power cycle.</p>
    <div class="pure-control-group">
      <label for="itho_numvrem">Number of virtual remotes</label>
      <input id="itho_numvrem" type="number" min="1" max="12" size="6">
    </div>
    <p>A virtual remote can be used to force the Itho unit in medium mode before sending a command from the add-on. This
      way the add-on can overrule the current speed settings of the Itho (ie. due to active input from a built in
      humidity sensor or another remote)</p>
    <p>Received commands from RF remotes can be translated to matching virtual remote commands with the 'Map RF remotes
      to virtual remote' option for non-CVE devices. The 0-255 speed control does not work for these devices, the timer
      settings do work as expected.</p>
    <p>The following virtual remote settings work on the first (index=0) virtual remote configured.</p>
    <div class="pure-control-group">
      <label for="option-vremotejoin" class="pure-radio">Send join command</label>
      <input id="option-vremotejoin-2" type="radio" name="option-itho_sendjoin" value="2"> every power on
      <input id="option-vremotejoin-1" type="radio" name="option-itho_sendjoin" value="1"> next power on
      <input id="option-vremotejoin-0" type="radio" name="option-itho_sendjoin" value="0"> off
    </div>
    <div class="pure-control-group">
      <label for="option-vremotemedium" class="pure-radio">Force medium/auto mode</label>
      <input id="option-vremotemedium-1" type="radio" name="option-itho_forcemedium" value="1"> on
      <input id="option-vremotemedium-0" type="radio" name="option-itho_forcemedium" value="0"> off
    </div>
    <div class="pure-control-group">
      <label for="option-vremoteapi" class="pure-radio">Map RF remotes to virtual remote</label>
      <input id="option-vremoteapi-1" type="radio" name="option-itho_vremoteapi" value="1"> on
      <input id="option-vremoteapi-0" type="radio" name="option-itho_vremoteapi" value="0"> off
    </div>
    <legend><br>Built-in humidity/temp sensor support (reboot needed):</legend>
    <p>The add-on firmware by default makes available the humidity/temperature data (via web page, API, MQTT) if an
      original sensor was fitted.</p>
    <p>Additional sensor support may be enabled to disable the Itho firmware sensor support (box will not respond to
      humidity changes) and to access an alternative or a retrofitted SHT30 sensor.</p>
    <br>
    <div class="pure-control-group">
      <label for="option-syssht30" class="pure-radio">Additional sensor support</label>
      <input id="option-syssht30-1" type="radio" name="option-syssht30" value="1"> on
      <input id="option-syssht30-0" type="radio" name="option-syssht30" value="0"> off
    </div>
    <legend><br>Enable/Disable I2C commands:</legend>
    <p>Not all commands types are available on all Itho devices. These settings make it possible to disable specific
      commands. <br>Disabling PWM2I2C will also change the main page user interface to use the Virtual Remote.</p>
    <br>
    <div class="pure-control-group">
      <label for="option-pwm2i2c" class="pure-radio">CVE fan control (PWM2I2C)</label>
      <input id="option-pwm2i2c-1" type="radio" name="option-itho_pwm2i2c" value="1"> on
      <input id="option-pwm2i2c-0" type="radio" name="option-itho_pwm2i2c" value="0"> off
    </div>
    <div class="pure-control-group">
      <label for="option-31da" class="pure-radio">Ventilation status (31DA)</label>
      <input id="option-31da-1" type="radio" name="option-itho_31da" value="1"> on
      <input id="option-31da-0" type="radio" name="option-itho_31da" value="0"> off
    </div>
    <div class="pure-control-group">
      <label for="option-31d9" class="pure-radio">Fan system status (31D9)</label>
      <input id="option-31d9-1" type="radio" name="option-itho_31d9" value="1"> on
      <input id="option-31d9-0" type="radio" name="option-itho_31d9" value="0"> off
    </div>
    <div class="pure-control-group">
      <label for="option-2401" class="pure-radio">System status (2401)</label>
      <input id="option-2401-1" type="radio" name="option-itho_2401" value="1"> on
      <input id="option-2401-0" type="radio" name="option-itho_2401" value="0"> off
    </div>
    <div class="pure-control-group">
      <label for="option-4210" class="pure-radio">WPU counters (4210)</label>
      <input id="option-4210-1" type="radio" name="option-itho_4210" value="1"> on
      <input id="option-4210-0" type="radio" name="option-itho_4210" value="0"> off
    </div>
    <legend><br>I2C safe guard:</legend>
    <p>The i2c safe guard is a protection mechanism ONLY for CVE fans with built-in humidity sensor (models with light
      grey
      lid)</p>
    <p>(Note: needs sniffer capable add-on (hw revision 2.5 and up) to work, does not work in conjunction with the i2c
      sniffer, reboot needed)
    </p>
    <div class="pure-control-group">
      <label for="option-i2c_safe_guard" class="pure-radio">I2C safe guard</label>
      <input id="option-i2c_safe_guard-2" type="radio" name="option-i2c_safe_guard" value="2"> auto
      <input id="option-i2c_safe_guard-1" type="radio" name="option-i2c_safe_guard" value="1"> on
      <input id="option-i2c_safe_guard-0" type="radio" name="option-i2c_safe_guard" value="0"> off
    </div>
  </fieldset>
</form>
<script>
  $(document).ready(function () {
    getSettings('syssetup');
  });
</script>
`;

var html_hadiscovery = `
<style>
    body {
        font-family: Arial, sans-serif;
        margin: 20px;
    }

    .hidden {
        display: none;
    }
</style>
<div class="header">
    <h1>Home Automation discovery configuration</h1>
</div>
<br><br>
<div id="ithostatusrdy" class="hidden"></div>
<form class="pure-form" id="HADiscForm">
    <fieldset>
        <label>
            <input type="checkbox" id="advancedModeToggle">
            Advanced Mode
        </label>
        <label style="margin-left: 20px;">
            HA Device Name:
            <input type="text" id="hadevicename" class="pure-input-1-4" maxlength="31">
        </label>
    </fieldset>
</form>

<table id="HADiscTable" class="pure-table pure-table-bordered">
    <!-- content dynamically generated -->
</table>

<br>

<button id="save_update_had" class="pure-button pure-button-primary">Save and update</button>
<pre id="output"></pre>

<script>
    var ha_dev_name = "Loading...";
    var status_items_loaded = false;
    var hastatus_to;
    getSettings('hadiscinfo')

    $(document).ready(function () {
        function repeat() {
            if (!status_items_loaded) hastatus_to = setTimeout(repeat, 100);
            else {
                $("#ithostatusrdy").addClass('hidden');
                $("#ithostatusrdy").html('');
                clearTimeout(hastatus_to);
                getSettings('gethadiscsettings');
            }
        }
        repeat();
    });

    function showItho(i) {
        let s = document.getElementById("iis"), f = ["31d9", "31da", "2401", "4210"];
        s.innerHTML = "";
        for (let x = 0; x < 4; x++) {
            let p = (i >> (2 * x)) & 3;
            if ((p & 1) && !(p & 2)) s.innerHTML += "I2C command " + f[x] + " activated but not ready<br>";
        }
    }

    function updateStatusTableFromCompactJson(compactJson) {
        ha_dev_name = compactJson.d;

        // Update HA Device Name
        document.getElementById("hadevicename").value = ha_dev_name;


        const rows = $("#HADiscTable tbody tr");

        if (rows.length == 0)
            return;

        if (!compactJson.c || !Array.isArray(compactJson.c) || compactJson.c.length === 0)
            return;

        compactJson.c.forEach((component) => {
            const index = component.i;
            const row$ = rows.eq(index);

            // Update Include checkbox
            const includeCheckbox$ = row$.find("td:nth-child(1) input[type='checkbox']");
            includeCheckbox$.prop("checked", true);

            // Update Name
            const nameInput$ = row$.find("td:nth-child(3) input");
            nameInput$.val(component.n);

            // Update Device Class
            const deviceClassInput$ = row$.find("td:nth-child(4) input");
            if (component.dc) {
                deviceClassInput$.val(component.dc);
            }

            // Update State Class
            const stateClassInput$ = row$.find("td:nth-child(5) input");
            if (component.sc) {
                stateClassInput$.val(component.sc);
            }

            // Update Value Template
            const valueTemplateInput$ = row$.find("td:nth-child(6) input");
            if (component.vt) {
                valueTemplateInput$.val(component.vt);
            }

            // Update Unit of Measurement
            const unitInput$ = row$.find("td:nth-child(7) input");
            if (component.um) {
                unitInput$.val(component.um);
            }
        });



    }

    function generateCompactJson() {
        const rows = $("#HADiscTable tbody tr");
        const components = [];

        rows.each(function (index) {
            const include = $(this).find("input[type='checkbox']").is(":checked");
            if (!include) return;

            const label = $(this).find("td:nth-child(2)").text().trim();
            const name = $(this).find("td:nth-child(3) input").val().trim();
            const deviceClass = $(this).find("td:nth-child(4) input").val().trim();
            const stateClass = $(this).find("td:nth-child(5) input").val().trim();;
            const valueTemplateInput$ = $(this).find("td:nth-child(6) input");
            const valueTemplate = valueTemplateInput$.val().trim();
            const unitOfMeasurement = $(this).find("td:nth-child(7) input").val().trim();

            const component = {
                i: index,
                n: name,
            };

            // Only include dc if changed
            if (deviceClass) component.dc = deviceClass;

            // Only include sc if different from the default
            if (stateClass) component.sc = stateClass;

            // Only include vt if different from the default
            if (valueTemplate !== valueTemplateInput$.data("default")) {
                component.vt = valueTemplate;
            }

            // Include unit_of_measurement if provided
            if (unitOfMeasurement) {
                component.um = unitOfMeasurement;
            }

            components.push(component);
        });

        const deviceType = document.getElementById("hadevicename").value.trim();

        const compactJson = {
            sscnt: current_status_count,
            d: deviceType,
            c: components,
        };
        if (debug) console.log(JSON.stringify(compactJson));
        return compactJson;
    }



</script>
`;

var html_mqttsetup = `
<div class="header">
  <h1>MQTT setup</h1>
</div>
<p>Configuration of the MQTT server to publish the status to and subscribe topic to receive commands</p>
<p>Note: the MQTT base topic should to be unique for every add-on</p>
<style>
  .pure-form-aligned .pure-control-group label {
    width: 15em;
  }
</style>
<form class="pure-form pure-form-aligned">
  <fieldset>
    <div class="pure-control-group">
      <label>MQTT Status</label>
      <button id="mqtt_conn" class="pure-button" style="pointer-events:none;">Unknown</button>
    </div>
    <br>
    <div class="pure-control-group">
      <label for="option-mqtt_active" class="pure-radio">MQTT Active</label>
      <input id="option-mqtt_active-1" type="radio" name="option-mqtt_active" onchange='radio("mqtt_active", 1)'
        value="1"> on
      <input id="option-mqtt_active-0" type="radio" name="option-mqtt_active" onchange='radio("mqtt_active", 0)'
        value="0"> off
    </div>
    <br>
    <div class="pure-control-group">
      <label for="mqtt_serverName">Server</label>
      <input id="mqtt_serverName" maxlength="63" type="text">
    </div>
    <div class="pure-control-group">
      <label for="mqtt_username">Username</label>
      <input id="mqtt_username" maxlength="64" type="text"
        oninput="if(this.value.length > 32) { this.value = this.value.substring(0, 32); document.getElementById('username-msg').innerHTML = 'Username truncated to 32 characters.'; } else { document.getElementById('username-msg').innerHTML = ''; }">
      <span id="username-msg" style="color: red;"></span>
    </div>
    <div class="pure-control-group">
      <label for="mqtt_password">Password</label>
      <input id="mqtt_password" maxlength="64" type="Password"
        oninput="if(this.value.length > 32) { this.value = this.value.substring(0, 32); document.getElementById('password-msg').innerHTML = 'Password truncated to 32 characters.'; } else { document.getElementById('password-msg').innerHTML = ''; }">
      <span id="password-msg" style="color: red;"></span>
    </div>
    <div class="pure-control-group">
      <label for="mqtt_port">Port</label>
      <input id="mqtt_port" maxlength="5" type="text">
    </div>
    <div class="pure-control-group">
      <label id="label-mqtt_basetopic" for="mqtt_base_topic">MQTT base topic</label>
      <input id="mqtt_base_topic" maxlength="120" type="text">
    </div>
    <br>
    <div class="pure-control-group">
      <label for="option-mqtt_ha_active" class="pure-radio">Home Assistant MQTT Discovery</label>
      <input id="option-mqtt_ha_active-1" type="radio" name="option-mqtt_ha_active"
        onchange='radio("mqtt_ha_active", 1)' value="1"> on
      <input id="option-mqtt_ha_active-0" type="radio" name="option-mqtt_ha_active"
        onchange='radio("mqtt_ha_active", 0)' value="0"> off
    </div>
    <div class="pure-control-group">
      <label id="label-mqtt_ha" for="mqtt_ha_topic">Home Assistant Discovery topic prefix</label>
      <input id="mqtt_ha_topic" maxlength="120" type="text">
    </div>
    <br>
    <div class="pure-control-group">
      <label for="option-mqtt_domoticz_active" class="pure-radio">Domoticz MQTT</label>
      <input id="option-mqtt_domoticz_active-1" type="radio" name="option-mqtt_domoticz_active"
        onchange='radio("mqtt_domoticz_active", 1)' value="1"> on
      <input id="option-mqtt_domoticz_active-0" type="radio" name="option-mqtt_domoticz_active"
        onchange='radio("mqtt_domoticz_active", 0)' value="0"> off
    </div>
    <div class="pure-control-group">
      <label id="label-mqtt_domoticzin" for="mqtt_domoticzin_topic" style="display: none;">Domoticz in topic</label>
      <input id="mqtt_domoticzin_topic" maxlength="120" type="text" style="display: none;">
    </div>
    <div class="pure-control-group">
      <label id="label-mqtt_domoticzout" for="mqtt_domoticzout_topic" style="display: none;">Domoticz out topic</label>
      <input id="mqtt_domoticzout_topic" maxlength="120" type="text" style="display: none;">
    </div>
    <div class="pure-control-group">
      <label id="label-mqtt_idx" for="mqtt_idx" style="display: none;">Device IDX</label>
      <input id="mqtt_idx" maxlength="5" type="text" style="display: none;">
    </div>
    <div class="pure-control-group">
      <label id="label-sensor_idx" for="sensor_idx" style="display: none;">Sensor IDX</label>
      <input id="sensor_idx" maxlength="5" type="text" style="display: none;">
    </div>
    <br>
    <div class="pure-controls">
      <button id="mqttsubmit" class="pure-button pure-button-primary">Save</button>
    </div>
  </fieldset>
</form>
<p><br>MQTT Topics:<br></p>
<table class="pure-table pure-table-bordered">
  <thead style="white-space: nowrap;">
    <tr>
      <th>Topic type:</th>
      <th>Topic name:</th>
      <th>Use:</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>State</td>
      <td><span name="mqtt_base_topic"></span>/state</td>
      <td>Contains a 0-255 value representing the PWM2I2C speed setting</td>
    </tr>
    <tr>
      <td>Itho status</td>
      <td><span name="mqtt_base_topic"></span>/ithostatus</td>
      <td>Contains JSON with info from Itho firmware (same info as under menu Itho status)</td>
    </tr>
    <tr>
      <td>Remotes info</td>
      <td><span name="mqtt_base_topic"></span>/remotesinfo</td>
      <td>Contains JSON with info on RF devices paired to the add-on</td>
    </tr>
    <tr>
      <td>Last command info</td>
      <td><span name="mqtt_base_topic"></span>/lastcmd</td>
      <td>Contains the last command received on the API</td>
    </tr>
    <tr>
      <td>Command</td>
      <td><span name="mqtt_base_topic"></span>/cmd</td>
      <td>Commands posted to this topic will be processed by the MQTTAPI</td>
    </tr>
    <tr>
      <td>Device info</td>
      <td><span name="mqtt_base_topic"></span>/deviceinfo</td>
      <td>Contains device information on the add-on and itho device connected</td>
    </tr>    
    <tr>
      <td>Last will</td>
      <td><span name="mqtt_base_topic"></span>/lwt</td>
      <td>Last will online/offline info topic</td>
    </tr>
  </tbody>
</table>
<br><br>
<script>
  $(document).ready(function () {
    getSettings('mqttsetup');
  });

  var input = document.getElementById("mqtt_base_topic");
  input.addEventListener('input', updateSpanByName);
  input.targetName = "mqtt_base_topic";

  function updateSpanByName(e) {

    let elements = document.getElementsByName(e.currentTarget.targetName);
    for (let i = 0; i < elements.length; i++) {
      elements[i].textContent = this.value;
    }
  }  
</script>
`;

var html_systemsettings_cc1101 = `
<legend><br>Autodetect CC1101 RF module (reboot needed):</legend>
<p>Activate the CC1101 RF module. If autodetect fails, this setting will be automatically switched off again.</p>
<div class="pure-control-group">
  <label for="option-itho_remotes" class="pure-radio">Itho RF remote support</label>
  <input id="option-itho_remotes-1" type="radio" name="option-itho_rf_support" onchange='radio("itho_remotes", 1)'
    value="1"> on
  <input id="option-itho_remotes-0" type="radio" name="option-itho_rf_support" onchange='radio("itho_remotes", 0)'
    value="0"> off
</div>
<br>
`;

var html_help = `
<div class="header"><h1>Need some help?</h1></div>
<br><br><span>More information and contact options are available at GitHub: <a href='https://github.com/arjenhiemstra/ithowifi' target='_blank'>https://github.com/arjenhiemstra/ithowifi</a></span>
`;

var html_reboot_script = `
<p id="time">This page will reload to the start page in... </p>
<script>
  $(document).ready(function () {
    startCountdown();
  });
</script>
`;

var html_index = `
<div class="header">
  <h1>WiFi controller for Itho</h1>
</div><br><br>
<div class="pure-g">
  <div class="pure-u-1 pure-u-md-1-5"></div>
  <div class="pure-u-1 pure-u-md-3-5">
    <div id="sliderdiv">
      <div style="text-align: center">
        <div style="float: left;">
          <svg style="width:24px;height:24px" viewBox="0 0 24 24">
            <path fill="currentColor"
              d="M12.5,2C9.64,2 8.57,4.55 9.29,7.47L15,13.16C15.87,13.37 16.81,13.81 17.28,14.73C18.46,17.1 22.03,17 22.03,12.5C22.03,8.92 18.05,8.13 14.35,10.13C14.03,9.73 13.61,9.42 13.13,9.22C13.32,8.29 13.76,7.24 14.75,6.75C17.11,5.57 17,2 12.5,2M3.28,4L2,5.27L4.47,7.73C3.22,7.74 2,8.87 2,11.5C2,15.07 5.96,15.85 9.65,13.87C9.97,14.27 10.4,14.59 10.89,14.79C10.69,15.71 10.25,16.75 9.27,17.24C6.91,18.42 7,22 11.5,22C13.8,22 14.94,20.36 14.94,18.21L18.73,22L20,20.72L3.28,4Z">
            </path>
          </svg>
        </div>
        <div style="float: right;">
          <svg style="width:24px;height:24px" viewBox="0 0 24 24">
            <path fill="currentColor"
              d="M12,11A1,1 0 0,0 11,12A1,1 0 0,0 12,13A1,1 0 0,0 13,12A1,1 0 0,0 12,11M12.5,2C17,2 17.11,5.57 14.75,6.75C13.76,7.24 13.32,8.29 13.13,9.22C13.61,9.42 14.03,9.73 14.35,10.13C18.05,8.13 22.03,8.92 22.03,12.5C22.03,17 18.46,17.1 17.28,14.73C16.78,13.74 15.72,13.3 14.79,13.11C14.59,13.59 14.28,14 13.88,14.34C15.87,18.03 15.08,22 11.5,22C7,22 6.91,18.42 9.27,17.24C10.25,16.75 10.69,15.71 10.89,14.79C10.4,14.59 9.97,14.27 9.65,13.87C5.96,15.85 2,15.07 2,11.5C2,7 5.56,6.89 6.74,9.26C7.24,10.25 8.29,10.68 9.22,10.87C9.41,10.39 9.73,9.97 10.14,9.65C8.15,5.96 8.94,2 12.5,2Z">
            </path>
          </svg>
        </div>
        <div id="ithotextval">
          -
        </div>
      </div>
      <input id="ithoslider" type="range" min="0" max="255" value="0" class="slider" style="width: 100%; margin: 0 0 2em 0;">
    </div>
    <div id="reminterface">
      <div style="text-align: center;margin: 2em 0 0 0;">
        <button id="command-low" class="pure-button" style="float: left;">Low</button><button id="command-medium"
          class="pure-button">Medium</button><button id="command-high" class="pure-button"
          style="float: right;">High</button>
      </div>
      <div style="text-align: center;margin: 2em 0 0 0;">
        <button id="command-timer1" class="pure-button" style="float: left;">Timer1</button><button id="command-timer2"
          class="pure-button">Timer2</button><button id="command-timer3" class="pure-button"
          style="float: right;">Timer3</button>
      </div>
      <div style="text-align: center;margin: 2em 0 0 0;">
        <div id="sensor_temp"></div>
        <div id="sensor_hum"></div>
      </div>
    </div>
  </div>
  <div class="pure-u-1 pure-u-md-1-5"></div>
</div>
<script>
  $(document).ready(function () {
    if (hw_revision.startsWith('NON-CVE ') || itho_pwm2i2c == 0) {
      $('#sliderdiv').addClass('hidden');
      $('#reminterface').empty();
    }
    else {
      var slide = document.getElementById("ithoslider");
      if (!!slide) {
        slide.oninput = function () { $('#ithotextval').html(this.value); };
        slide.onchange = function () { updateSlider(this.value); };
      }
    }

    getSettings('sysstat');
    getSettings('remtype');
  });
</script>
`;

var html_ithosettings = `
<div class="header">
  <h1>Itho settings</h1>
</div>
<p>Configuration of the Itho unit</p>
<style>
  .pure-form-aligned .pure-control-group label {
    width: 15em;
  }
</style>
<form class="pure-form pure-form-aligned">
  <fieldset>
    <span>Itho device type: </span><span id="itho_devtype">retrieving...</span>
    <br>
    <span>Itho hw version: </span><span id="itho_hwversion">retrieving...</span>
    <br>
    <span>Itho fw version: </span><span id="itho_fwversion">retrieving...</span>
    <br>
    <span>Manufacturer: </span><span id="itho_mfr">retrieving...</span>
    <br><br>
    <button id="ithogetsettings" class="pure-button pure-button-primary">Retrieve settings</button><br><br>
    <div id="settings_cache_load" class="hidden">
      <span>Settings loaded from browser cache. Note that changes done through the settings WebAPI might not be reflected correctly here. Force refresh the (individual) setting(s) to update values and cache.<br></span>
      <button id="ithoforcerefresh" class="pure-button pure-button-primary">Force settings refresh</button><br><br>
    </div>
    <div id="downloadsettingsdiv" class="hidden">
      <span>Download most recent settings cache as JSON file:<br></span>
      <button id="downloadsettings" class="pure-button pure-button-primary">Download</button><br><br>
    </div>
    <span style="color:red">Warning!!<br>This controls low level settings of your Itho unit, possibly damaging the
      unit.<br>Use with care and use only if you know what you are doing!</span><br><br>
    <table id="SettingsTable" class="pure-table pure-table-bordered" style="font-size:.85em"></table><br><br>
  </fieldset>
</form>
<script>
  $(document).ready(function () {
    getSettings('ithosetup');
    if (localStorage.getItem("ihto_settings_complete") == "true" && localStorage.getItem("uuid") == uuid) {
      loadSettingsLocStor();
      $('#settings_cache_load').removeClass('hidden');
      $('#downloadsettingsdiv').removeClass('hidden');
    }
  });
</script>
`;

var html_reset = `
<div class="header">
  <h1>Restart/Restore device</h1>
</div><br><br>
<form class="pure-form">
  <fieldset>
    <button id="reboot" class="pure-button">Restart add-on</button><br><br>
    <button id="saveallconfigs" class="pure-button">Save all configs</button><br><br>
    <button id="resetsysconf" class="pure-button">Reset system configs</button>&nbsp;&nbsp;<button id="resetwificonf"
      class="pure-button">Reset wifi config</button><br><br>
    <button id="format" class="pure-button">Format filesystem</button>
    <div id="rebootscript"></div>
  </fieldset>
</form>
`;

var html_remotessetup = `
<div class="header">
  <h1>RF Devices setup</h1>
</div>
<style>
  .pure-form-aligned .pure-control-group label {
    width: 15em;
  }
</style>
<br>
<p>A range of RF devices (ie. remotes, co2 and rv sensors) can be joined to the add-on using a CC1101 RF module.<br> The
  add-on will translate commands from a RF device to speed/timer commands towards the itho.<br>This way the speed status
  of a
  RF device is always correctly represented on the add-on and within your domotica software.</p>
<p>There is also an option
  to monitor only. With this option checked, a RF device still paired with an Itho unit can be monitored without
  influencing
  the commands using the add-on.</p>
<p>Changing the remote function to "Send" will enable the user to send RF commands by using the CC1101 RF module.</p>
<p>Last received commands (and if applicable data) received from paired RF devices is available through the MQTT API and
  WebAPI</p>
<form class="pure-form pure-form-aligned">
  <fieldset>
    <br><br>
    <div class="pure-control-group">
      <label for="itho_llm">Learn/Leave mode</label>
      <button id="itho_llm" class="pure-button">Unknown</button>
    </div>
    <br><br>
    <div class="pure-control-group">
      <label for="module_rf_id_str">Module RF ID</label>
      <input id="module_rf_id_str" maxlength="8" type="text">
      <button id="update_rf_id" onclick="update_rf_setup()" class="pure-button button-secondary">Update</button>
    </div>
    <div class="pure-control-group">
      <label for="itho_numrfrem">Number of RF remotes</label>
      <input id="itho_numrfrem" type="number" min="1" max="12" size="6">
    <button id="update_num_rf" onclick="update_rf_setup()" class="pure-button button-secondary">Update</button>
    </div>    
  </fieldset>
  <fieldset>
    <br>
    <legend><br>RF remotes:</legend>
    <br>
    <table id="RemotesTable" class="pure-table pure-table-bordered" style="text-align: center;">
    </table>
    <div class="pure-control-group">
      <button id="itho_update_remote" class="pure-button">Update</button>&nbsp;<button id="itho_remove_remote"
        class="pure-button">Remove</button>
    </div>
  </fieldset>
</form>
<script>
  $(document).ready(function () {
    $('#main').css('max-width', '1400px')
    getSettings('ithoremotes');
    getSettings('rfsetup');
  });
  function update_rf_setup() {
    setTimeout(function () {
      getSettings('rfsetup');
    }, 1000);
  }
</script>
`;

var html_vremotessetup = `
<div class="header">
  <h1>Virtual Remotes setup</h1>
</div>
<style>
  .pure-form-aligned .pure-control-group label {
    width: 15em;
  }
</style>
<br>
<p>The add-on can present itself as one or more virtual remote(s). A virtual remote emulates a physical remote through
  software.<br>A virtual remote must be joined to the Itho unit before it can be used. A join command will only be
  accepted by the Itho unit within the first 2 minutes after a power cycle.</p>
<p>With the 'Copy ID' function the ID from an existing physical remote can be copied. If the remote type is supported,
  the type will be detected automatically. If this physical remote is already joined to the Itho unit a new join is not
  necessary.</p>
<p>There are multiple types of remotes that can be emulated; The RFT CVE (536-0020, 536-0024, 536-0124), RFT AUTO(-N)
  (536-0150), RFT DemandFlow/QualityFlow (536-0146).<br>Pictures of these remotes can be found here: <a
    href='https://github.com/arjenhiemstra/ithowifi/tree/master/remotes'
    target='_blank'>https://github.com/arjenhiemstra/ithowifi/tree/master/remotes</a></p>
<form class="pure-form pure-form-aligned">
  <fieldset>
    <br>
    <legend><br>Virtual remotes:</legend>
    <table id="vremotesTable" class="pure-table pure-table-bordered" style="text-align: center;"></table>
    <div class="pure-control-group">
      <button id="itho_update_vremote" class="pure-button">Update</button>&nbsp;<button id="itho_remove_vremote"
        class="pure-button">Reset</button>&nbsp;<button id="itho_copyid_vremote" class="pure-button">Copy ID</button>
    </div>
    <br><br>
  </fieldset>
</form>
<script>
  $(document).ready(function () {
    $('#main').css('max-width', '1400px')
    getSettings('ithovremotes');
  });
</script>
`;

var html_syslog = `
<div class="header">
    <h1>System log and log settings</h1>
</div>
<p>System log and configuration of log level and syslog target</p>
<style>
    .pure-form-aligned .pure-control-group label {
        width: 15em;
    }
</style>
<div id="sdblog_outer">
    <div style="display:inline-block;vertical-align:top;overflow:hidden;padding-bottom:5px;">System Log:</div>
    <div id='dblog'
        style="white-space:pre;padding:10px;background-color:black;min-height:30vh;max-height:60vh;font: 0.9rem Inconsolata, monospace;border-radius:7px;overflow:auto;color:#aaa">
        Loading logfile...
    </div>
    <div style="padding-top:5px;">
        <a class="pure-button" href="/curlog">Download current logfile</a>&nbsp;
        <a id='prevlog' class="pure-button" href="javascript:alert('Not available!');">Download previous logfile</a>
    </div>
</div><br><br>

<div id="rflog_outer" class="hidden">
    <div style="display:inline-block;vertical-align:top;overflow:hidden;padding-bottom:5px;">RF Log:</div>
    <div id="rflog"
        style="padding:10px;background-color:black;min-height:30vh;max-height:60vh;font: 0.9rem Inconsolata, monospace;border-radius:7px;overflow:auto;color:#aaa">
    </div>
    <div style="padding-top:5px;">
        <a href="#" class="pure-button" onclick="$('#rflog').empty()">Clear</a>
    </div>
</div><br><br>

<form class="pure-form pure-form-aligned">
    <fieldset>
        <legend><br>Log Settings:</legend>
        <div class="pure-control-group">
            <label for="loglevel">Log level:</label>
            <select id="loglevel" name="loglevel">
                <option value="0">Emergency</option>
                <option value="1">Alert</option>
                <option value="2">Critical</option>
                <option value="3">Error</option>
                <option value="4">Warning</option>
                <option value="5">Notice</option>
                <option value="6">Info</option>
                <option value="7">Debug</option>
            </select>
        </div>
        <div class="pure-control-group">
            <label for="option-esplog_active" class="pure-radio">Include ESP-IDF error log</label>
            <input id="option-esplog_active-1" type="radio" name="option-esplog_active"
                onchange='radio("esplog_active", 1)' value="1"> on
            <input id="option-esplog_active-0" type="radio" name="option-esplog_active"
                onchange='radio("esplog_active", 0)' value="0"> off
        </div>
        <br>
        <div class="pure-control-group">
            <label for="option-webserial_active" class="pure-radio">Webserial active (reboot needed)</label>
            <input id="option-webserial_active-1" type="radio" name="option-webserial_active"
                onchange='radio("webserial_active", 1)' value="1"> on
            <input id="option-webserial_active-0" type="radio" name="option-webserial_active"
                onchange='radio("webserial_active", 0)' value="0"> off
        </div>
        <p>The web serial terminal can be reached at http://[IP]:8000/webserial</p>
        <br>
        <div class="pure-control-group">
            <label for="rfloglevel">RF Debug log level:</label>
            <select id="rfloglevel" name="rfloglevel">
                <option value="0">Off</option>
                <option value="1">Level1</option>
                <option value="2">Level2</option>
                <option value="3">Level3</option>
            </select>
        </div>
        <p>RF Debug logging works only with an activated CC1101 module.</p>
        <p>- Level1 will show only known Itho commands from all devices</p>
        <p>- Level2 will show all received RF messages from devices joined to the add-on</p>
        <p>- Level3 will show all received RF messages from all devices</p>
        <br>
        <legend><br>Syslog Settings:</legend>
        <div class="pure-control-group">
            <label for="option-syslog_active" class="pure-radio">Syslog Active</label>
            <input id="option-syslog_active-1" type="radio" name="option-syslog_active"
                onchange='radio("syslog_active", 1)' value="1"> on
            <input id="option-syslog_active-0" type="radio" name="option-syslog_active"
                onchange='radio("syslog_active", 0)' value="0"> off
        </div>
        <div class="pure-control-group">
            <label for="logserver">Syslog server</label>
            <input id="logserver" maxlength="63" type="text">
        </div>
        <div class="pure-control-group">
            <label for="logport">Port</label>
            <input id="logport" maxlength="5" type="text">
        </div>
        <div class="pure-control-group">
            <label for="logref">Syslog Reference</label>
            <input id="logref" maxlength="63" type="text">
        </div>
        <div class="pure-controls">
            <button id="syslogsubmit" class="pure-button pure-button-primary">Save</button>
        </div>
    </fieldset>

</form>
<script>
    $(document).ready(function () {
        getSettings('logsetup');
        getlog("/curlog");
    });
</script>
`;
