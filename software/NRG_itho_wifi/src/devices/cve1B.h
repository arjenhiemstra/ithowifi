#pragma once

const uint16_t itho_CVE1Bsetting6[] 	{ 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,999};
const uint16_t itho_CVE1Bsetting7[] 	{ 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,32,33,34,35,36,37,38,39,40,30,31,999};
const uint16_t itho_CVE1Bsetting8[] 	{ 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,41,42,43,44,17,18,19,20,21,22,23,24,25,26,27,32,33,34,35,36,37,38,39,40,30,31,999};
const uint16_t itho_CVE1Bsetting9[] 	{ 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,41,42,43,44,45,46,47,48,49,17,18,19,20,21,22,23,24,25,26,27,32,33,34,35,36,37,38,39,40,30,31,999};
const uint16_t itho_CVE1Bsetting10[] 	{ 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,41,42,43,44,45,46,47,48,49,50,18,19,20,21,22,23,24,25,26,27,32,33,34,35,36,37,38,39,40,51,30,31,999};
const uint16_t itho_CVE1Bsetting11[] 	{ 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,41,42,43,44,45,46,47,48,49,50,51,18,19,20,21,22,23,24,25,26,27,32,33,34,35,36,52,37,38,39,40,30,31,999};
const uint16_t itho_CVE1Bsetting17_20[] { 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,42,43,44,45,46,47,48,49,50,53,54,55,56,57,58,59,60,61,62,63,64,65,32,33,34,66,67,68,37,38,39,40,30,31,999};
const uint16_t itho_CVE1Bsetting21[] 	{ 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,42,43,44,45,46,47,48,49,50,53,54,55,69,57,58,70,71,59,60,61,62,63,64,65,32,33,34,66,67,68,37,38,39,40,30,31,999};
const uint16_t itho_CVE1Bsetting22[] 	{ 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,42,43,44,45,46,47,48,49,50,53,54,55,69,57,58,70,71,59,60,61,62,63,64,65,32,33,34,66,67,68,37,38,39,40,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,30,31,999};
const uint16_t itho_CVE1Bsetting24[] 	{ 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,42,43,44,45,46,47,48,49,50,53,54,55,69,57,58,70,71,59,60,61,62,63,64,65,32,33,34,66,67,68,37,38,39,40,30,31,88,89,90,91,92,75,81,93,94,95,96,97,98,999};
const uint16_t itho_CVE1Bsetting25[] 	{ 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,42,43,44,45,46,47,48,49,50,53,54,55,69,57,58,70,71,99,100,101,102,103,104,59,60,61,62,63,64,65,32,33,34,66,67,68,37,38,39,40,30,31,88,89,90,91,92,75,81,93,94,95,96,97,98,999};
const uint16_t itho_CVE1Bsetting26_27[]	{ 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,42,43,44,45,46,47,48,49,50,53,54,55,69,57,58,70,71,105,106,107,108,109,110,111,112,113,114,115,116,117,118,59,60,61,62,63,64,65,32,33,34,66,67,68,37,38,39,40,30,31,88,89,90,91,92,75,81,93,94,95,96,97,98,999};

const char* ithoCVE1BSettingsLabels[] =  {
      "OEM number", 
      "Print version (1 is high performance)", 
      "Min setting of potentiometer low (rpm)", 
      "Max setting of potentiometer low (rpm)", 
      "Min setting of potentiometer high (rpm)", 
      "Max setting of potentiometer high (rpm)", 
      "RF enable", 
      "I2C mode", 
      "Fan constant Ca2", 
      "Fan constant Ca1", 
      "Fan constant Ca0", 
      "Fan constant Cb2", 
      "Fan constant Cb1", 
      "Fan constant Cb0", 
      "Fan constant Cc2", 
      "Fan constant Cc1", 
      "Fan constant Cc0", 
      "Minimum ventilation (%)", 
      "CO2 concentration absent (ppm)", 
      "CO2 concentration at present (ppm)", 
      "Min. Fan setpoint at valve low (%)", 
      "Min. Fan setpoint at valve high (%)", 
      "Min. Fan setpoint at valve high and PIR (%)", 
      "CO2 concentration at 100% valve low (ppm)", 
      "CO2 concentration at 100% valve high (ppm)", 
      "CO2 concentration at 100% valve high and PIR (ppm)", 
      "Max speed change per minute (%)", 
      "Expiration time PIR present (Min)", 
      "Period time (min)", 
      "Stabilization period (min)", 
      "Manual operation", 
      "Speed at manual operation (rpm)", 
      "CO2 period time (min)", 
      "CO2 change rising CO2 (ppm)", 
      "CO2 change decreasing CO2 (ppm)", 
      "CO2 detection limit normal situation (ppm)", 
      "Time duration of boost blocking (min)", 
      "Stop blocking time at low desire (%)", 
      "Max fast change. CO2 reg. Blocking time (%_min)", 
      "CO2 increase start of blocking time (ppm)", 
      "Max speed up during blocking time (%)", 
      "Speed at absence (rpm)", 
      "Block time auto. reset absence (min)", 
      "Max. time deferred absence (min)", 
      "Min. desire for deferred absence (%)", 
      "PIR level 1 (%)", 
      "PIR level 2 (%)", 
      "PIR level 1 wait time (sec)", 
      "PIR level 2 wait time (sec)", 
      "PIR level 1 running time (sec)", 
      "PIR level 2 running time (sec)", 
      "Min fan setpoint BaseFlow present", 
      "Maximum period rev. block (min)", 
      "Minimum ventilation level in Auto (%)", 
      "Max time in high (min)", 
      "Max time in low or middle (min)", 
      "Heatrae", 
      "CO2 value air quality moderate (ppm)", 
      "CO2 value air quality good (ppm)", 
      "CO2 value absent (ppm)", 
      "CO2 value present (ppm)", 
      "Min speed valve low AreaFlow (%)", 
      "Min speed valve high AreaFlow (%)", 
      "CO2 value vent. 100% valve low (ppm)", 
      "CO2 value vent. 100% valve high (ppm)", 
      "Max speed change CO2 control (%_min)", 
      "CO2 change constant CO2 (ppm)", 
      "Blocking time fan ramp up (min)", 
      "Blocking time maximum duration (min)", 
      "Position after maximum time high", 
      "Type of dwelling", 
      "Number of occupants", 
      "UseWiredRh", 
      "RhSensorInterval (0.1s)", 
      "StoreInterval (s)", 
      "Ventilation level it goes to when the RH control turns on (%)", 
      "RHmin (%)", 
      "RHmax (%)", 
      "RHstart (%)", 
      "RHstop (%)", 
      "RHIncrease (%)", 
      "Minimum time for fan to go to high in RH control (min)", 
      "RHdiff (%)", 
      "RHconstantDiff (%)", 
      "RHconstantTime (min)", 
      "RHlow (%)", 
      "RHselectOperationMode", 
      "RHsensitivityIncrease", 
      "Dew point at which the RV-IC heater should start (K)", 
      "Dew point at which the RV-IC heater should stop (K)", 
      "Minimum time the RV-IC heater is on (min)", 
      "Maximum time the RV-IC heater should be on (min)", 
      "RH sensor found-available", 
      "External RH sensor overrides internal yes-no", 
      "Sampling time of the RH and temperature measurement (sec)", 
      "Hysteresis RH for return to normal operation (%)", 
      "Rise in absolute humidity (X) at which it goes to high (mg_kg)", 
      "Hysteresis X before falling back to normal operation (mg_kg)", 
      "Maximum time it is allowed by the RH control to remain in high (min)", 
      "NightOnePersonOneFloor (%)", 
      "NightTwoPersonsOneFloor (%)", 
      "NightMultiPersonsOneFloor (%)", 
      "NightOnePersonMultiFloor (%)", 
      "NightTwoPersonsMultiFloor (%)", 
      "NightMultiPersonsMultiFloor (%)", 
      "NightOnePersonOneFloorOptima1 (%)", 
      "NightTwoPersonsOneFloorOptima1 (%)", 
      "NightMultiPersonsOneFloorOptima1 (%)", 
      "NightOnePersonMultiFloorOptima1 (%)", 
      "NightTwoPersonsMultiFloorOptima1 (%)", 
      "NightMultiPersonsMultiFloorOptima1 (%)", 
      "NightOnePersonOneFloorOptima2 (%)", 
      "NightTwoPersonsOneFloorOptima2 (%)", 
      "NightMultiPersonsOneFloorOptima2 (%)", 
      "NightOnePersonMultiFloorOptima2 (%)", 
      "NightTwoPersonsMultiFloorOptima2 (%)", 
      "NightMultiPersonsMultiFloorOptima2 (%)", 
      "AutoVentilationOneFloor (%)", 
      "AutoVentilationMultiFloor (%)"
};

const uint8_t itho_CVE1Bstatus6[] 		{ 0,1,2,3,4,5,6,7,8,9,10,11,12,13,255};
const uint8_t itho_CVE1Bstatus7[] 		{ 0,1,2,3,4,5,6,7,8,9,10,11,12,255};
const uint8_t itho_CVE1Bstatus8[] 		{ 0,1,2,3,4,5,6,14,15,7,8,9,10,11,12,255};
const uint8_t itho_CVE1Bstatus9_11[] 	{ 0,1,2,3,4,5,6,14,15,7,8,9,10,11,12,16,17,18,19,20,21,255};
const uint8_t itho_CVE1Bstatus17[] 		{ 0,1,2,3,4,5,6,14,15,7,17,8,9,10,11,12,255};
const uint8_t itho_CVE1Bstatus18[] 		{ 0,1,2,3,4,5,6,14,15,7,17,8,9,11,12,255};
const uint8_t itho_CVE1Bstatus20_21[] 	{ 0,1,2,3,4,5,6,14,7,17,8,9,11,12,255};
const uint8_t itho_CVE1Bstatus22[] 		{ 0,1,2,3,4,5,6,14,7,17,8,9,11,12,22,23,24,25,26,27,28,29,30,31,32,255};
const uint8_t itho_CVE1Bstatus24_27[] 	{ 0,1,2,3,4,5,6,14,7,17,33,34,255};


const struct ithoLabels ithoCVE1BStatusLabels[] =  {
	{   "Ventilation setpoint (%)",  		  "ventilation-setpoint_perc" },
	{   "Fan setpoint (rpm)",  				  "fan-setpoint_rpm" },
	{   "Fan speed (rpm)",  				  "fan-speed_rpm" },
	{   "Error",  							  "error" },
	{   "Selection",  						  "selection" },
	{   "Startup counter",  				  "startup-counter" },
	{   "Total operation (hours)",  		  "total-operation_hours" },
	{   "Highest CO2 concentration (ppm)",    "highest-co2-concentration_ppm" },
	{   "Co2 velocity", 					  "co2-velocity" },
	{   "Valve",  							  "valve" },
	{   "Presence timer (sec)", 			  "presence-timer_sec" },
	{   "Current period",  					  "current-period" },
	{   "Period timer",  					  "period-timer" },
	{   "Sample timer",  					  "sample-timer" },
	{   "Absence (min)",  					  "absence_min" },
	{   "Deferred absence (min)",  			  "deferred-absence_min" },
	{   "Rfspeed absolute",  				  "rfspeed-absolute" },
	{   "Highest RH concentration (%)",  	  "highest-rh-concentration_perc" },
	{   "Next Rfspeed absolute",  			  "next-rfspeed-absolute" },
	{   "Next Rfspeed level",  				  "next-rfspeed-level" },
	{   "Speed timer",  					  "speed-timer" },
	{   "New level time",  					  "new-level-time" },
	{   "Sensor fault",  					  "sensor-fault" },
	{   "Internal humidity (%)",  			  "internal-humidity_perc" },
	{   "Internal temp (Â°C)",  				  "internal-temp_c" },
	{   "Selected mode",  					  "selected-mode" },
	{   "Enhanced bathroom", 				  "enhanced-bathroom" },
	{   "Counter stop (s)",  				  "counter-stop_s" },
	{   "Counter min-time (s)",  			  "counter-min-time_s" },
	{   "Ventilation request (%)",  		  "ventilation-request_perc" },
	{   "Measurement actual (%)",  			  "measurement-actual_perc" },
	{   "Measurement previous first (%)",  	  "measurement-previous-first_perc" },
	{   "Measurement previous second (%)",    "measurement-previous-second_perc" },
	{   "RelativeHumidity",  				  "relativehumidity" },
	{   "Temperature", 			 			  "temperature" }
};

const uint16_t *itho1BSettingsMap[] =	{ nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, itho_CVE1Bsetting6, itho_CVE1Bsetting7, itho_CVE1Bsetting8, itho_CVE1Bsetting9,   itho_CVE1Bsetting10,  itho_CVE1Bsetting11,  nullptr, nullptr, nullptr, nullptr, nullptr, itho_CVE1Bsetting17_20, itho_CVE1Bsetting17_20, nullptr, itho_CVE1Bsetting17_20, itho_CVE1Bsetting21, itho_CVE1Bsetting22, nullptr, itho_CVE1Bsetting24,   itho_CVE1Bsetting25,   itho_CVE1Bsetting26_27, itho_CVE1Bsetting26_27 };
const uint8_t  *itho1BStatusMap[]   =	{ nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, itho_CVE1Bstatus6,  itho_CVE1Bstatus7,  itho_CVE1Bstatus8,  itho_CVE1Bstatus9_11, itho_CVE1Bstatus9_11, itho_CVE1Bstatus9_11, nullptr, nullptr, nullptr, nullptr, nullptr, itho_CVE1Bstatus17,     itho_CVE1Bstatus18,     nullptr, itho_CVE1Bstatus20_21, itho_CVE1Bstatus20_21, itho_CVE1Bstatus22, nullptr, itho_CVE1Bstatus24_27, itho_CVE1Bstatus24_27, itho_CVE1Bstatus24_27,  itho_CVE1Bstatus24_27  };
